{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "/*\n * SetServoID.c\n *\n * Created: 11-9-2015 12:28:19\n *  Author: mv\n */ \n\n#include \"SetServoID.h\"\n\n#define THISID 0x55 // Change value\n\nint main(void)\n{\n	uart1_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));\n	sei();\n\n	setID(THISID);\n\n    while(1)\n    {\n        ledState(1);\n        _delay_ms(1000);\n        ledState(0); \n        _delay_ms(1000);\n    }\n}\n\n/**\n * Sets the ID of the connected AX18 servo. Only one servo must be connected at a time.\n * @param IDnumber Programs the wanted ID in the servo.\n */\nvoid setID (unsigned char IDnumber)\n{\n	unsigned char checksum = ~(BROADCAST_ID + AX_LED_LENGTH + AX_WRITE_DATA + AX_ID + IDnumber);\n	uart1_putc(AX_START);\n	uart1_putc(AX_START);\n	uart1_putc(BROADCAST_ID);\n	uart1_putc(AX_LED_LENGTH);\n	uart1_putc(AX_WRITE_DATA);\n	uart1_putc(AX_ID);\n	uart1_putc(IDnumber);\n	uart1_putc(checksum);\n}\n\n/**\n * Turns the indication led on the servo on or off.\n * @param Status The status of the indication led.\n */\nvoid ledState (unsigned char Status)\n{\n	unsigned char Checksum = ~(THISID + AX_LED_LENGTH + AX_WRITE_DATA + AX_LED + Status);\n	uart1_putc(AX_START);              // Send Instructions over Serial\n	uart1_putc(AX_START);\n	uart1_putc(THISID);\n	uart1_putc(AX_LED_LENGTH);\n	uart1_putc(AX_WRITE_DATA);\n	uart1_putc(AX_LED);\n	uart1_putc(Status);\n	uart1_putc(Checksum);\n}",
			"file": "/C/Users/m/Documents/Git/Software/Hardware/Tools/SetServoID/SetServoID.c",
			"file_size": 1366,
			"file_write_time": 130864433808191163,
			"settings":
			{
				"buffer_size": 1307,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoDriver.c",
			"settings":
			{
				"buffer_size": 2600,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoControl.c",
			"settings":
			{
				"buffer_size": 667,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "/*\n * SetServoID.h\n *\n * Created: 11-9-2015 12:28:19\n *  Author: mv\n */ \n#ifndef F_CPU\n#define F_CPU 16000000UL // 16 MHz clock speed\n#endif\n\n#define UART_BAUD_RATE 1000000\n\n#include <avr/io.h>\n#include <util/delay.h>\n#include <avr/interrupt.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include \"AX18ServoDriver.h\"\n\n#include \"IOPorts_ATMega.h\"\n#include \"uart.h\"	\n\nvoid setID(unsigned char IDnumber);\nvoid ledState(unsigned char Status);",
			"file": "/C/Users/m/Documents/Git/Software/Hardware/Tools/SetServoID/SetServoID.h",
			"file_size": 459,
			"file_write_time": 130864428165271693,
			"settings":
			{
				"buffer_size": 436,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/m/Documents/Git/Software",
		"/C/Users/m/Documents/Git/Software/Hardware",
		"/C/Users/m/Documents/Git/Software/Hardware/Tools",
		"/C/Users/m/Documents/Git/Software/testing",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl"
	],
	"file_history":
	[
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/SetServoID.c",
		"/C/Users/m/Downloads/putty.log",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoControl.c",
		"/C/Users/m/Google Drive/Robotica_Matthijs/AI2015_ass1/sampleAgent.py",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoDriver.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/ServoDriver.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/phoenix_driver_ax12.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/BioloidEX.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/PyPoseGen.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Arbotix_Controller.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Phantom_Phoenix.ino",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.cpp",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.h",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/gaits.h",
		"/C/Users/m/Google Drive/Settings/Git key/LTPM",
		"/C/Users/m/Google Drive/Robotica/Documentatie/PVA",
		"/C/Users/m/Documents/Git/overdrachtsdocumentatie/references.bib",
		"/C/Users/m/Google Drive/Artificial Intellegence/Python 2.x/environment.py",
		"/C/Users/m/Google Drive/Settings/Linux/open-in-terminal",
		"/C/test/test.py"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			"C:\\Users\\m\\Documents\\Git\\Software\\official\\phantomx_ax\\Phantom_Phoenix"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"id",
			"CPU"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/C/Users/m/Documents/Git/Software/Hardware/Tools/SetServoID/SetServoID.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1307,
						"regions":
						{
						},
						"selection":
						[
							[
								834,
								834
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoDriver.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2600,
						"regions":
						{
						},
						"selection":
						[
							[
								631,
								631
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoControl.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 667,
						"regions":
						{
						},
						"selection":
						[
							[
								667,
								664
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 219.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/m/Documents/Git/Software/Hardware/Tools/SetServoID/SetServoID.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 436,
						"regions":
						{
						},
						"selection":
						[
							[
								285,
								285
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "phantom.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
