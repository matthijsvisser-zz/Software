{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "ServoDriver.h",
			"settings":
			{
				"buffer_size": 2569,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/*\n  BioloidController.cpp - ArbotiX Library for Bioloid Pose Engine\n Copyright (c) 2008-2012 Michael E. Ferguson.  All right reserved.\n \n This library is free software; you can redistribute it and/or\n modify it under the terms of the GNU Lesser General Public\n License as published by the Free Software Foundation; either\n version 2.1 of the License, or (at your option) any later version.\n \n This library is distributed in the hope that it will be useful,\n but WITHOUT ANY WARRANTY; without even the implied warranty of\n MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n Lesser General Public License for more details.\n \n You should have received a copy of the GNU Lesser General Public\n License along with this library; if not, write to the Free Software\n Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n */\n\n#include \"BioloidEx.h\"\n#include <avr/pgmspace.h>\n\n/* initializes serial1 transmit at baud, 8-N-1 */\nBioloidControllerEx::BioloidControllerEx(long baud){\n  int i;\n  // setup storage\n  id_ = (unsigned char *) malloc(AX12_MAX_SERVOS * sizeof(unsigned char));\n  pose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));\n  nextpose_ = (unsigned int *) malloc(AX12_MAX_SERVOS * sizeof(unsigned int));\n  speed_ = (int *) malloc(AX12_MAX_SERVOS * sizeof(int));\n  // initialize\n  for(i=0;i<AX12_MAX_SERVOS;i++){\n    id_[i] = i+1;\n    pose_[i] = 512;\n    nextpose_[i] = 512;\n  }\n  frameLength = BIOLOID_FRAME_LENGTH;\n  interpolating = 0;\n  playing = 0;\n  nextframe_ = millis();\n  ax12Init(baud);  \n}\n\n/* new-style setup */\nvoid BioloidControllerEx::setup(int servo_cnt){\n  int i;\n  // setup storage\n  id_ = (unsigned char *) malloc(servo_cnt * sizeof(unsigned char));\n  pose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));\n  nextpose_ = (unsigned int *) malloc(servo_cnt * sizeof(unsigned int));\n  speed_ = (int *) malloc(servo_cnt * sizeof(int));\n  // initialize\n  poseSize = servo_cnt;\n  for(i=0;i<poseSize;i++){\n    id_[i] = i+1;\n    pose_[i] = 512;\n    nextpose_[i] = 512;\n  }\n  interpolating = 0;\n  playing = 0;\n  nextframe_ = millis();\n}\nvoid BioloidControllerEx::setId(int index, int id){\n  id_[index] = id;\n}\nint BioloidControllerEx::getId(int index){\n  return id_[index];\n}\n\n/* load a named pose from FLASH into nextpose. */\nvoid BioloidControllerEx::loadPose( const unsigned int * addr ){\n  int i;\n  poseSize = pgm_read_word_near(addr); // number of servos in this pose\n  for(i=0; i<poseSize; i++)\n    nextpose_[i] = pgm_read_word_near(addr+1+i) << BIOLOID_SHIFT;\n}\n/* read in current servo positions to the pose. */\nvoid BioloidControllerEx::readPose(){\n  for(int i=0;i<poseSize;i++){\n    pose_[i] = ax12GetRegister(id_[i],AX_PRESENT_POSITION_L,2)<<BIOLOID_SHIFT;\n    delay(25);   \n  }\n}\n/* write pose out to servos using sync write. */\nvoid BioloidControllerEx::writePose(){\n  int temp;\n  int length = 4 + (poseSize * 3);   // 3 = id + pos(2byte)\n  int checksum = 254 + length + AX_SYNC_WRITE + 2 + AX_GOAL_POSITION_L;\n  setTXall();\n  ax12write(0xFF);\n  ax12write(0xFF);\n  ax12write(0xFE);\n  ax12write(length);\n  ax12write(AX_SYNC_WRITE);\n  ax12write(AX_GOAL_POSITION_L);\n  ax12write(2);\n  for(int i=0; i<poseSize; i++)\n  {\n    temp = pose_[i] >> BIOLOID_SHIFT;\n    checksum += (temp&0xff) + (temp>>8) + id_[i];\n    ax12write(id_[i]);\n    ax12write(temp&0xff);\n    ax12write(temp>>8);\n  } \n  ax12write(0xff - (checksum % 256));\n  setRX(0);\n}\n\n/* set up for an interpolation from pose to nextpose over TIME \n milliseconds by setting servo speeds. */\nvoid BioloidControllerEx::interpolateSetup(int time){\n  int i;\n  int frames = (time/frameLength) + 1;\n  nextframe_ = millis() + frameLength;\n  // set speed each servo...\n  for(i=0;i<poseSize;i++){\n    if(nextpose_[i] > pose_[i]){\n      speed_[i] = (nextpose_[i] - pose_[i])/frames + 1;\n    }\n    else{\n      speed_[i] = (pose_[i]-nextpose_[i])/frames + 1;\n    }\n  }\n  interpolating = 1;\n}\n/* interpolate our pose, this should be called at about 30Hz. */\n#define WAIT_SLOP_FACTOR 10  \nvoid BioloidControllerEx::interpolateStep(boolean fWait){\n  if(interpolating == 0) return;\n  int i;\n  int complete = poseSize;\n  if (!fWait) {\n    if (millis() < (nextframe_ - WAIT_SLOP_FACTOR)) {\n      return;    // We still have some time to do something... \n    }\n  }\n  while(millis() < nextframe_) ;\n  nextframe_ = millis() + frameLength;\n  // update each servo\n  for(i=0;i<poseSize;i++){\n    int diff = nextpose_[i] - pose_[i];\n    if(diff == 0){\n      complete--;\n    }\n    else{\n      if(diff > 0){\n        if(diff < speed_[i]){\n          pose_[i] = nextpose_[i];\n          complete--;\n        }\n        else\n          pose_[i] += speed_[i];\n      }\n      else{\n        if((-diff) < speed_[i]){\n          pose_[i] = nextpose_[i];\n          complete--;\n        }\n        else\n          pose_[i] -= speed_[i];                \n      }       \n    }\n  }\n  if(complete <= 0) interpolating = 0;\n  writePose();      \n}\n\n/* get a servo value in the current pose */\nint BioloidControllerEx::getCurPose(int id){\n  for(int i=0; i<poseSize; i++){\n    if( id_[i] == id )\n      return ((pose_[i]) >> BIOLOID_SHIFT);\n  }\n  return -1;\n}\n/* get a servo value in the next pose */\nint BioloidControllerEx::getNextPose(int id){\n  for(int i=0; i<poseSize; i++){\n    if( id_[i] == id )\n      return ((nextpose_[i]) >> BIOLOID_SHIFT);\n  }\n  return -1;\n}\n/* set a servo value in the next pose */\nvoid BioloidControllerEx::setNextPose(int id, int pos){\n  for(int i=0; i<poseSize; i++){\n    if( id_[i] == id ){\n      nextpose_[i] = (pos << BIOLOID_SHIFT);\n      return;\n    }\n  }\n}\n\n/* Added by Kurt */\nvoid BioloidControllerEx::setNextPoseByIndex(int index, int pos) {  // set a servo value by index for next pose\n  if (index < poseSize) {\n    nextpose_[index] = (pos << BIOLOID_SHIFT);\n  }\n}\n/* play a sequence. */\nvoid BioloidControllerEx::playSeq( const transition_t  * addr ){\n  sequence = (transition_t *) addr;\n  // number of transitions left to load\n  transitions = pgm_read_word_near(&sequence->time);\n  sequence++;    \n  // load a transition\n  loadPose((const unsigned int *)pgm_read_word_near(&sequence->pose));\n  interpolateSetup(pgm_read_word_near(&sequence->time));\n  transitions--;\n  playing = 1;\n}\n/* keep playing our sequence */\nvoid BioloidControllerEx::play(){\n  if(playing == 0) return;\n  if(interpolating > 0){\n    interpolateStep();\n  }\n  else{  // move onto next pose\n    sequence++;   \n    if(transitions > 0){\n      loadPose((const unsigned int *)pgm_read_word_near(&sequence->pose));\n      interpolateSetup(pgm_read_word_near(&sequence->time));\n      transitions--;\n    }\n    else{\n      playing = 0;\n    }\n  }\n}\n\n\n\n",
			"file": "BioloidEX.cpp",
			"file_size": 6874,
			"file_write_time": 130862722668829533,
			"settings":
			{
				"buffer_size": 6873,
				"line_ending": "Windows"
			}
		},
		{
			"file": "phoenix_driver_ax12.cpp",
			"settings":
			{
				"buffer_size": 40187,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/m/Documents/Git/Software",
		"/C/Users/m/Documents/Git/Software/official",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix"
	],
	"file_history":
	[
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/PyPoseGen.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/ServoDriver.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Arbotix_Controller.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Phantom_Phoenix.ino",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.cpp",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.h",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/gaits.h",
		"/C/Users/m/Google Drive/Settings/Git key/LTPM",
		"/C/Users/m/Google Drive/Robotica/Documentatie/PVA",
		"/C/Users/m/Documents/Git/overdrachtsdocumentatie/references.bib",
		"/C/Users/m/Google Drive/Artificial Intellegence/Python 2.x/environment.py",
		"/C/Users/m/Google Drive/Settings/Linux/open-in-terminal",
		"/C/test/test.py"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "ServoDriver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2569,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "BioloidEX.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6873,
						"regions":
						{
						},
						"selection":
						[
							[
								2307,
								2307
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 6242.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "phoenix_driver_ax12.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 40187,
						"regions":
						{
						},
						"selection":
						[
							[
								20244,
								20244
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11246.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "phantom.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
