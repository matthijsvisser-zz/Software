{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "Hex_Globals.h",
			"settings":
			{
				"buffer_size": 2741,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoDriver.h",
			"settings":
			{
				"buffer_size": 4654,
				"line_ending": "Windows",
				"name": "// EEPROM AREA  ///////////////////////////"
			}
		},
		{
			"contents": "### Adapted from code in Artificial Intelligence: A Modern Approach, by\n### Russell and Norvig\n\n### Note to students: please do not use the AIMA code for HW 2. Use this\n### code instead. I've made some changes to the AIMA code to make it simpler\n### and easier to work with. Using the AIMA code directly will just give you\n#### headaches.\n\nimport random\n\n### global variable holding all possible agent actions\nagent_actions = ['Left', 'Right', 'Suck', 'Up', 'Down']\n\n### you should not need to change this code.\nclass Agent :\n    \"\"\"An Agent is a subclass of Object with one required slot,\n    .program, which should hold a function that takes one argument, the\n    percept, and returns an action. (What counts as a percept or action\n    will depend on the specific environment in which the agent exists.) \"\"\"\n\n    def __init__(self): \n        self.alive = True\n\n    def program(percept):\n        return raw_input('Percept=%s; action? ' % percept)\n        \n\n### a simple but stupid agent. Use this as a template when creating your own agents.\nclass RandomAgent(Agent):\n    \"An agent that chooses an action at random, ignoring all percepts.\"\n    def __init__(self, actions):\n        Agent.__init__(self)\n        self.actions = actions\n\n    def program(self, percept) :\n        action = random.choice(self.actions)\n        print \"Percept: %s Action: %s\" % (percept, action)\n        return action\n\n\n### A slightly smarter agent - basically a reflex agent, this program just uses \n### its current percepts to decide on an action.\nclass TableDrivenAgent(Agent) :\n\n    def __init__(self) :\n        Agent.__init__(self)\n\n        ### this is how our agent will determine what to do.\n        ### for every possible percept, we will look up in our\n        ### table (a dictionary) to find the correct action.\n        \n        ### this will only work in 3x3 grids.\n\n        ### if the room is clean, we need to move\n        self.actionTable = {((0,0), 'Clean') : 'Right',\n                            ((1,0), 'Clean') : 'Right',\n                            ((2,0), 'Clean') : 'Up',\n                            ((2,1), 'Clean') : 'Up',\n                            ((2,2), 'Clean') : 'Left',\n                            ((1,2), 'Clean') : 'Left',\n                            ((0,2), 'Clean') : 'Down',\n                            ((0,1), 'Clean') : 'Down',\n                            ((1,1), 'Clean') : 'Down'}\n        ### if the room is dirty, let's clean it.\n        for i in (0,1,2) :\n            for j in (0,1,2) :\n                self.actionTable[((i,j), 'Dirty')] = 'Suck'\n        ### this gives us a dictionary that maps room coordinates and state to an action.\n\n    \n    def program(self, percept) :\n        ### All we do is use the current percept to look up the correct\n        ### action in a table.\n        print \"Percept: %s Action: %s\" % (percept, self.actionTable[percept])\n        return self.actionTable[percept]\n\nclass ModelDrivenAgent(Agent) :\n\n    def __init__(self) :\n        Agent.__init__(self)\n\n        \n        self.previousLocation = []\n        self.previousAction = ''\n        self.currentGoal = 'FindWallX';\n        self.roomX = 0\n        self.roomY = 0;\n\n        self.currentColumn = 0;\n        self.currentDirection = 'Down'\n        \n\n    \n    def program(self, percept) :\n\n        newAction = 'Clean';\n\n        if self.currentGoal == 'FindWallX':\n\n            # Check if we moved\n            if self.previousLocation == percept[0]:\n                self.roomX = percept[0][0]\n                self.currentGoal = 'FindWallY'\n                newAction = 'Up'\n            else:\n                newAction = 'Right'\n        else:\n            if self.currentGoal == 'FindWallY':\n\n                # Check if we moved\n                if self.previousLocation == percept[0]:\n                    self.roomY = percept[0][0]\n                    self.currentGoal = 'CleanRoom'\n                    self.currentDirection = 'Down'\n                    newAction = 'Down'\n                else:\n                    newAction = 'Up'\n            else:\n                if self.currentGoal == 'CleanRoom':\n                    if percept[1] == 'Dirty':\n                        newAction = 'Suck'\n                    if percept[1] == 'Clean':\n                        if self.currentDirection == 'Down':\n                            if percept[0][1] == 0:\n                                self.currentDirection = 'Up'\n                                newAction = 'Left'\n                            else:\n                                newAction = 'Down'\n                        else:\n                            if self.currentDirection == 'Up':\n                                if percept[0][1] == self.roomY:\n                                    self.currentDirection = 'Down'\n                                    newAction = 'Left'\n                                else:\n                                    newAction = 'Up'\n\n\n\n        self.previousLocation = percept[0]\n        self.previousAction = newAction\n\n        print \"Percept: %s Action: %s Goal: %s\" % (percept, newAction, self.currentGoal)\n        return newAction\n\n\n\n        \n        \n\n        \n",
			"file": "/C/Users/m/Google Drive/Robotica_Matthijs/AI2015_ass1/sampleAgent.py",
			"file_size": 5143,
			"file_write_time": 130861963820000000,
			"settings":
			{
				"buffer_size": 5143,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/C/Users/m/Downloads/putty.log",
			"settings":
			{
				"buffer_size": 106,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 81.0,
		"last_filter": "Package Control: insta",
		"selected_items":
		[
			[
				"Package Control: insta",
				"Package Control: Install Package"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 160.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/m/Documents/Git/Software",
		"/C/Users/m/Documents/Git/Software/official",
		"/C/Users/m/Documents/Git/Software/testing",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl",
		"/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl"
	],
	"file_history":
	[
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/ServoDriver.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/phoenix_driver_ax12.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/BioloidEX.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/PyPoseGen.h",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Arbotix_Controller.cpp",
		"/C/Users/m/Documents/Git/Software/official/phantomx_ax/Phantom_Phoenix/Phantom_Phoenix.ino",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.cpp",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/nuke.h",
		"/C/Users/m/Downloads/AX_PhantomX_Hexapod/AX_PhantomX_Hexapod/gaits.h",
		"/C/Users/m/Google Drive/Settings/Git key/LTPM",
		"/C/Users/m/Google Drive/Robotica/Documentatie/PVA",
		"/C/Users/m/Documents/Git/overdrachtsdocumentatie/references.bib",
		"/C/Users/m/Google Drive/Artificial Intellegence/Python 2.x/environment.py",
		"/C/Users/m/Google Drive/Settings/Linux/open-in-terminal",
		"/C/test/test.py"
	],
	"find":
	{
		"height": 28.0
	},
	"find_in_files":
	{
		"height": 96.0,
		"where_history":
		[
			"C:\\Users\\m\\Documents\\Git\\Software\\official\\phantomx_ax\\Phantom_Phoenix"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"id",
			"CPU"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Hex_Globals.h",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 2741,
						"regions":
						{
						},
						"selection":
						[
							[
								518,
								518
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1090.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/Users/m/Documents/Git/Software/testing/AX18ServoControl/AX18ServoControl/AX18ServoDriver.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4654,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								219
							]
						],
						"settings":
						{
							"auto_name": "// EEPROM AREA  ///////////////////////////",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/C/Users/m/Google Drive/Robotica_Matthijs/AI2015_ass1/sampleAgent.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5143,
						"regions":
						{
						},
						"selection":
						[
							[
								2917,
								2917
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1412.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/C/Users/m/Downloads/putty.log",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 106,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "phantom.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 228.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
