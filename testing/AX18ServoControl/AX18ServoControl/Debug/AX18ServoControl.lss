
AX18ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000008a  00800100  00800100  00000364  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000364  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000394  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000a06  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000234  00000000  00000000  00000e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000320  00000000  00000000  00001096  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000022c  00000000  00000000  000013b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000362  00000000  00000000  000015e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000087f  00000000  00000000  00001946  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000d8  00000000  00000000  000021c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__vector_20>
  54:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_21>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_28>
  74:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_29>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	aa 38       	cpi	r26, 0x8A	; 138
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 70 00 	call	0xe0	; 0xe0 <main>
  9c:	0c 94 76 01 	jmp	0x2ec	; 0x2ec <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <setID>:
	uart1_putc(Status);
	uart1_putc(Checksum);
}

void setID (unsigned char IDnumber)
{
  a4:	cf 93       	push	r28
  a6:	c8 2f       	mov	r28, r24
	unsigned char checksum = ~(BROADCAST_ID + AX_LED_LENGTH + AX_WRITE_DATA + AX_ID + IDnumber);
	uart1_putc(AX_START);
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(AX_START);
  ae:	8f ef       	ldi	r24, 0xFF	; 255
  b0:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(BROADCAST_ID);
  b4:	8e ef       	ldi	r24, 0xFE	; 254
  b6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(AX_LED_LENGTH);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(AX_WRITE_DATA);
  c0:	83 e0       	ldi	r24, 0x03	; 3
  c2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(AX_ID);
  c6:	83 e0       	ldi	r24, 0x03	; 3
  c8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(IDnumber);
  cc:	8c 2f       	mov	r24, r28
  ce:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
	uart1_putc(Checksum);
}

void setID (unsigned char IDnumber)
{
	unsigned char checksum = ~(BROADCAST_ID + AX_LED_LENGTH + AX_WRITE_DATA + AX_ID + IDnumber);
  d2:	88 e0       	ldi	r24, 0x08	; 8
  d4:	8c 0f       	add	r24, r28
	uart1_putc(BROADCAST_ID);
	uart1_putc(AX_LED_LENGTH);
	uart1_putc(AX_WRITE_DATA);
	uart1_putc(AX_ID);
	uart1_putc(IDnumber);
	uart1_putc(checksum);
  d6:	80 95       	com	r24
  d8:	0e 94 61 01 	call	0x2c2	; 0x2c2 <uart1_putc>
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <main>:

#define THISID 0x55

int main(void)
{
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <uart_init>
	uart1_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 48 01 	call	0x290	; 0x290 <uart1_init>
	DDRB = 0xFF;
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	84 b9       	out	0x04, r24	; 4

	sei();
  f4:	78 94       	sei

	//setBD();

	setID(THISID);
  f6:	85 e5       	ldi	r24, 0x55	; 85
  f8:	0e 94 52 00 	call	0xa4	; 0xa4 <setID>
  fc:	ff cf       	rjmp	.-2      	; 0xfc <main+0x1c>

000000fe <__vector_20>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  fe:	1f 92       	push	r1
 100:	0f 92       	push	r0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	0f 92       	push	r0
 106:	11 24       	eor	r1, r1
 108:	2f 93       	push	r18
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	ef 93       	push	r30
 110:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 112:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 116:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 11a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 11c:	e0 91 47 01 	lds	r30, 0x0147
 120:	ef 5f       	subi	r30, 0xFF	; 255
 122:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 124:	90 91 46 01 	lds	r25, 0x0146
 128:	e9 17       	cp	r30, r25
 12a:	39 f0       	breq	.+14     	; 0x13a <__vector_20+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 12c:	e0 93 47 01 	sts	0x0147, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	e6 5b       	subi	r30, 0xB6	; 182
 134:	fe 4f       	sbci	r31, 0xFE	; 254
 136:	20 83       	st	Z, r18
 138:	01 c0       	rjmp	.+2      	; 0x13c <__vector_20+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 13a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 13c:	90 91 45 01 	lds	r25, 0x0145
 140:	89 2b       	or	r24, r25
 142:	80 93 45 01 	sts	0x0145, r24
}
 146:	ff 91       	pop	r31
 148:	ef 91       	pop	r30
 14a:	9f 91       	pop	r25
 14c:	8f 91       	pop	r24
 14e:	2f 91       	pop	r18
 150:	0f 90       	pop	r0
 152:	0f be       	out	0x3f, r0	; 63
 154:	0f 90       	pop	r0
 156:	1f 90       	pop	r1
 158:	18 95       	reti

0000015a <__vector_21>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 15a:	1f 92       	push	r1
 15c:	0f 92       	push	r0
 15e:	0f b6       	in	r0, 0x3f	; 63
 160:	0f 92       	push	r0
 162:	11 24       	eor	r1, r1
 164:	8f 93       	push	r24
 166:	9f 93       	push	r25
 168:	ef 93       	push	r30
 16a:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 16c:	90 91 49 01 	lds	r25, 0x0149
 170:	80 91 48 01 	lds	r24, 0x0148
 174:	98 17       	cp	r25, r24
 176:	69 f0       	breq	.+26     	; 0x192 <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 178:	e0 91 48 01 	lds	r30, 0x0148
 17c:	ef 5f       	subi	r30, 0xFF	; 255
 17e:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 180:	e0 93 48 01 	sts	0x0148, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	e6 59       	subi	r30, 0x96	; 150
 188:	fe 4f       	sbci	r31, 0xFE	; 254
 18a:	80 81       	ld	r24, Z
 18c:	80 93 c6 00 	sts	0x00C6, r24
 190:	05 c0       	rjmp	.+10     	; 0x19c <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 192:	e1 ec       	ldi	r30, 0xC1	; 193
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	8f 7d       	andi	r24, 0xDF	; 223
 19a:	80 83       	st	Z, r24
    }
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	9f 91       	pop	r25
 1a2:	8f 91       	pop	r24
 1a4:	0f 90       	pop	r0
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	0f 90       	pop	r0
 1aa:	1f 90       	pop	r1
 1ac:	18 95       	reti

000001ae <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 1ae:	10 92 49 01 	sts	0x0149, r1
    UART_TxTail = 0;
 1b2:	10 92 48 01 	sts	0x0148, r1
    UART_RxHead = 0;
 1b6:	10 92 47 01 	sts	0x0147, r1
    UART_RxTail = 0;
 1ba:	10 92 46 01 	sts	0x0146, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 1be:	99 23       	and	r25, r25
 1c0:	1c f4       	brge	.+6      	; 0x1c8 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 1c2:	22 e0       	ldi	r18, 0x02	; 2
 1c4:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 1c8:	90 78       	andi	r25, 0x80	; 128
 1ca:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 1ce:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 1d2:	88 e9       	ldi	r24, 0x98	; 152
 1d4:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 1d8:	86 e0       	ldi	r24, 0x06	; 6
 1da:	80 93 c2 00 	sts	0x00C2, r24
 1de:	08 95       	ret

000001e0 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 1f4:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 1f8:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 1fc:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 1fe:	e0 91 02 01 	lds	r30, 0x0102
 202:	ef 5f       	subi	r30, 0xFF	; 255
 204:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 206:	90 91 01 01 	lds	r25, 0x0101
 20a:	e9 17       	cp	r30, r25
 20c:	39 f0       	breq	.+14     	; 0x21c <__vector_28+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 20e:	e0 93 02 01 	sts	0x0102, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	eb 5f       	subi	r30, 0xFB	; 251
 216:	fe 4f       	sbci	r31, 0xFE	; 254
 218:	20 83       	st	Z, r18
 21a:	01 c0       	rjmp	.+2      	; 0x21e <__vector_28+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 21c:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 21e:	90 91 00 01 	lds	r25, 0x0100
 222:	89 2b       	or	r24, r25
 224:	80 93 00 01 	sts	0x0100, r24
}
 228:	ff 91       	pop	r31
 22a:	ef 91       	pop	r30
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	8f 93       	push	r24
 248:	9f 93       	push	r25
 24a:	ef 93       	push	r30
 24c:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 24e:	90 91 04 01 	lds	r25, 0x0104
 252:	80 91 03 01 	lds	r24, 0x0103
 256:	98 17       	cp	r25, r24
 258:	69 f0       	breq	.+26     	; 0x274 <__vector_29+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 25a:	e0 91 03 01 	lds	r30, 0x0103
 25e:	ef 5f       	subi	r30, 0xFF	; 255
 260:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 262:	e0 93 03 01 	sts	0x0103, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	eb 5d       	subi	r30, 0xDB	; 219
 26a:	fe 4f       	sbci	r31, 0xFE	; 254
 26c:	80 81       	ld	r24, Z
 26e:	80 93 ce 00 	sts	0x00CE, r24
 272:	05 c0       	rjmp	.+10     	; 0x27e <__vector_29+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 274:	e9 ec       	ldi	r30, 0xC9	; 201
 276:	f0 e0       	ldi	r31, 0x00	; 0
 278:	80 81       	ld	r24, Z
 27a:	8f 7d       	andi	r24, 0xDF	; 223
 27c:	80 83       	st	Z, r24
    }
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	9f 91       	pop	r25
 284:	8f 91       	pop	r24
 286:	0f 90       	pop	r0
 288:	0f be       	out	0x3f, r0	; 63
 28a:	0f 90       	pop	r0
 28c:	1f 90       	pop	r1
 28e:	18 95       	reti

00000290 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
 290:	10 92 04 01 	sts	0x0104, r1
    UART1_TxTail = 0;
 294:	10 92 03 01 	sts	0x0103, r1
    UART1_RxHead = 0;
 298:	10 92 02 01 	sts	0x0102, r1
    UART1_RxTail = 0;
 29c:	10 92 01 01 	sts	0x0101, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 2a0:	99 23       	and	r25, r25
 2a2:	1c f4       	brge	.+6      	; 0x2aa <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
 2a4:	22 e0       	ldi	r18, 0x02	; 2
 2a6:	20 93 c8 00 	sts	0x00C8, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 2aa:	90 78       	andi	r25, 0x80	; 128
 2ac:	90 93 cd 00 	sts	0x00CD, r25
    UART1_UBRRL = (unsigned char) baudrate;
 2b0:	80 93 cc 00 	sts	0x00CC, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
 2b4:	88 e9       	ldi	r24, 0x98	; 152
 2b6:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
 2ba:	86 e0       	ldi	r24, 0x06	; 6
 2bc:	80 93 ca 00 	sts	0x00CA, r24
 2c0:	08 95       	ret

000002c2 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 2c2:	20 91 04 01 	lds	r18, 0x0104
 2c6:	2f 5f       	subi	r18, 0xFF	; 255
 2c8:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 2ca:	90 91 03 01 	lds	r25, 0x0103
 2ce:	29 17       	cp	r18, r25
 2d0:	e1 f3       	breq	.-8      	; 0x2ca <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 2d2:	e2 2f       	mov	r30, r18
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	eb 5d       	subi	r30, 0xDB	; 219
 2d8:	fe 4f       	sbci	r31, 0xFE	; 254
 2da:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 2dc:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 2e0:	e9 ec       	ldi	r30, 0xC9	; 201
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 62       	ori	r24, 0x20	; 32
 2e8:	80 83       	st	Z, r24
 2ea:	08 95       	ret

000002ec <_exit>:
 2ec:	f8 94       	cli

000002ee <__stop_program>:
 2ee:	ff cf       	rjmp	.-2      	; 0x2ee <__stop_program>
