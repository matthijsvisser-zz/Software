
AX18ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000008a  00800100  00800100  000003fe  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000110  00000000  00000000  0000042e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000d79  00000000  00000000  0000053e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000384  00000000  00000000  000012b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003d4  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002d8  00000000  00000000  00001a10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000408  00000000  00000000  00001ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000a9b  00000000  00000000  000020f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000110  00000000  00000000  00002b8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   8:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 cc 00 	jmp	0x198	; 0x198 <__vector_20>
  54:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_21>
  58:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  5c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  60:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  64:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  68:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  6c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  70:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_28>
  74:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_29>
  78:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_clear_bss>:
  88:	21 e0       	ldi	r18, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	aa 38       	cpi	r26, 0x8A	; 138
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  9c:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <main>:
void ledState(unsigned char Status);

#define THISID 0x55

int main(void)
{
  a4:	cf 93       	push	r28
  a6:	df 93       	push	r29
  a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x6>
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 24 01 	call	0x248	; 0x248 <uart_init>
	uart1_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 95 01 	call	0x32a	; 0x32a <uart1_init>
	DDRB = 0xFF;
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	84 b9       	out	0x04, r24	; 4

	sei();
  c2:	78 94       	sei

	unsigned long Position = 50;
	unsigned char	Position_L = Position & 0xFF;
	unsigned char	Position_H = (Position >> 8) & 0xFF;           // 16 bits - 2 x 8 bits variables
unsigned char buffer[2];
buffer[0] = Position_L;
  c4:	82 e3       	ldi	r24, 0x32	; 50
  c6:	89 83       	std	Y+1, r24	; 0x01
buffer[1] = Position_H;
  c8:	1a 82       	std	Y+2, r1	; 0x02
	AX18FWrite(BROADCAST_ID, AX_GOAL_POSITION_L, buffer, 2);
  ca:	22 e0       	ldi	r18, 0x02	; 2
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	ae 01       	movw	r20, r28
  d0:	4f 5f       	subi	r20, 0xFF	; 255
  d2:	5f 4f       	sbci	r21, 0xFF	; 255
  d4:	6e e1       	ldi	r22, 0x1E	; 30
  d6:	70 e0       	ldi	r23, 0x00	; 0
  d8:	8e ef       	ldi	r24, 0xFE	; 254
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 86 00 	call	0x10c	; 0x10c <AX18FWrite>
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x3c>

000000e2 <generateChecksum>:
#include "AX18ServoDriver.h"

unsigned char generateChecksum(unsigned char id, unsigned char address, unsigned char *data, unsigned length) {

	unsigned char checksum = id + (length + 3) + AX_WRITE_DATA + address;
  e2:	6a 5f       	subi	r22, 0xFA	; 250
  e4:	86 0f       	add	r24, r22
  e6:	82 0f       	add	r24, r18
	for(unsigned char i = 0; i < length; i++) {
  e8:	21 15       	cp	r18, r1
  ea:	31 05       	cpc	r19, r1
  ec:	69 f0       	breq	.+26     	; 0x108 <generateChecksum+0x26>
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	90 e0       	ldi	r25, 0x00	; 0
		checksum += data[i];
  f4:	e4 0f       	add	r30, r20
  f6:	f5 1f       	adc	r31, r21
  f8:	60 81       	ld	r22, Z
  fa:	86 0f       	add	r24, r22
#include "AX18ServoDriver.h"

unsigned char generateChecksum(unsigned char id, unsigned char address, unsigned char *data, unsigned length) {

	unsigned char checksum = id + (length + 3) + AX_WRITE_DATA + address;
	for(unsigned char i = 0; i < length; i++) {
  fc:	9f 5f       	subi	r25, 0xFF	; 255
  fe:	e9 2f       	mov	r30, r25
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	e2 17       	cp	r30, r18
 104:	f3 07       	cpc	r31, r19
 106:	b0 f3       	brcs	.-20     	; 0xf4 <generateChecksum+0x12>
		checksum += data[i];
	}
	return ~checksum;
}
 108:	80 95       	com	r24
 10a:	08 95       	ret

0000010c <AX18FWrite>:

void AX18FWrite(unsigned char id, unsigned char address, unsigned char *data, unsigned char length) {
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	f8 2e       	mov	r15, r24
 11e:	e6 2e       	mov	r14, r22
 120:	c4 2e       	mov	r12, r20
 122:	d5 2e       	mov	r13, r21
 124:	02 2f       	mov	r16, r18

	uart1_putc(AX_START);
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(AX_START);
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(id);
 136:	8f 2d       	mov	r24, r15
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(length + 3);
 13e:	80 2f       	mov	r24, r16
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	03 96       	adiw	r24, 0x03	; 3
 144:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(AX_WRITE_DATA);
 148:	83 e0       	ldi	r24, 0x03	; 3
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(address);
 150:	8e 2d       	mov	r24, r14
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>

	for(unsigned char i = 0; i < length; i++) {
 158:	00 23       	and	r16, r16
 15a:	51 f0       	breq	.+20     	; 0x170 <AX18FWrite+0x64>
 15c:	cc 2d       	mov	r28, r12
 15e:	dd 2d       	mov	r29, r13
 160:	10 e0       	ldi	r17, 0x00	; 0
		uart1_putc(data[i]);
 162:	89 91       	ld	r24, Y+
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>
	uart1_putc(id);
	uart1_putc(length + 3);
	uart1_putc(AX_WRITE_DATA);
	uart1_putc(address);

	for(unsigned char i = 0; i < length; i++) {
 16a:	1f 5f       	subi	r17, 0xFF	; 255
 16c:	10 13       	cpse	r17, r16
 16e:	f9 cf       	rjmp	.-14     	; 0x162 <AX18FWrite+0x56>
		uart1_putc(data[i]);
	}

	uart1_putc(generateChecksum(id, address, data, length));
 170:	20 2f       	mov	r18, r16
 172:	30 e0       	ldi	r19, 0x00	; 0
 174:	4c 2d       	mov	r20, r12
 176:	5d 2d       	mov	r21, r13
 178:	6e 2d       	mov	r22, r14
 17a:	8f 2d       	mov	r24, r15
 17c:	0e 94 71 00 	call	0xe2	; 0xe2 <generateChecksum>
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 ae 01 	call	0x35c	; 0x35c <uart1_putc>

}
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	1f 91       	pop	r17
 18c:	0f 91       	pop	r16
 18e:	ff 90       	pop	r15
 190:	ef 90       	pop	r14
 192:	df 90       	pop	r13
 194:	cf 90       	pop	r12
 196:	08 95       	ret

00000198 <__vector_20>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 198:	1f 92       	push	r1
 19a:	0f 92       	push	r0
 19c:	0f b6       	in	r0, 0x3f	; 63
 19e:	0f 92       	push	r0
 1a0:	11 24       	eor	r1, r1
 1a2:	2f 93       	push	r18
 1a4:	8f 93       	push	r24
 1a6:	9f 93       	push	r25
 1a8:	ef 93       	push	r30
 1aa:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 1ac:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 1b0:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 1b4:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1b6:	e0 91 47 01 	lds	r30, 0x0147
 1ba:	ef 5f       	subi	r30, 0xFF	; 255
 1bc:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 1be:	90 91 46 01 	lds	r25, 0x0146
 1c2:	e9 17       	cp	r30, r25
 1c4:	39 f0       	breq	.+14     	; 0x1d4 <__vector_20+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 1c6:	e0 93 47 01 	sts	0x0147, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	e6 5b       	subi	r30, 0xB6	; 182
 1ce:	fe 4f       	sbci	r31, 0xFE	; 254
 1d0:	20 83       	st	Z, r18
 1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <__vector_20+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 1d4:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 1d6:	90 91 45 01 	lds	r25, 0x0145
 1da:	89 2b       	or	r24, r25
 1dc:	80 93 45 01 	sts	0x0145, r24
}
 1e0:	ff 91       	pop	r31
 1e2:	ef 91       	pop	r30
 1e4:	9f 91       	pop	r25
 1e6:	8f 91       	pop	r24
 1e8:	2f 91       	pop	r18
 1ea:	0f 90       	pop	r0
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	0f 90       	pop	r0
 1f0:	1f 90       	pop	r1
 1f2:	18 95       	reti

000001f4 <__vector_21>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 1f4:	1f 92       	push	r1
 1f6:	0f 92       	push	r0
 1f8:	0f b6       	in	r0, 0x3f	; 63
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	8f 93       	push	r24
 200:	9f 93       	push	r25
 202:	ef 93       	push	r30
 204:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 206:	90 91 49 01 	lds	r25, 0x0149
 20a:	80 91 48 01 	lds	r24, 0x0148
 20e:	98 17       	cp	r25, r24
 210:	69 f0       	breq	.+26     	; 0x22c <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 212:	e0 91 48 01 	lds	r30, 0x0148
 216:	ef 5f       	subi	r30, 0xFF	; 255
 218:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 21a:	e0 93 48 01 	sts	0x0148, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	e6 59       	subi	r30, 0x96	; 150
 222:	fe 4f       	sbci	r31, 0xFE	; 254
 224:	80 81       	ld	r24, Z
 226:	80 93 c6 00 	sts	0x00C6, r24
 22a:	05 c0       	rjmp	.+10     	; 0x236 <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 22c:	e1 ec       	ldi	r30, 0xC1	; 193
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	8f 7d       	andi	r24, 0xDF	; 223
 234:	80 83       	st	Z, r24
    }
}
 236:	ff 91       	pop	r31
 238:	ef 91       	pop	r30
 23a:	9f 91       	pop	r25
 23c:	8f 91       	pop	r24
 23e:	0f 90       	pop	r0
 240:	0f be       	out	0x3f, r0	; 63
 242:	0f 90       	pop	r0
 244:	1f 90       	pop	r1
 246:	18 95       	reti

00000248 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 248:	10 92 49 01 	sts	0x0149, r1
    UART_TxTail = 0;
 24c:	10 92 48 01 	sts	0x0148, r1
    UART_RxHead = 0;
 250:	10 92 47 01 	sts	0x0147, r1
    UART_RxTail = 0;
 254:	10 92 46 01 	sts	0x0146, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 258:	99 23       	and	r25, r25
 25a:	1c f4       	brge	.+6      	; 0x262 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 25c:	22 e0       	ldi	r18, 0x02	; 2
 25e:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 262:	90 78       	andi	r25, 0x80	; 128
 264:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 268:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 26c:	88 e9       	ldi	r24, 0x98	; 152
 26e:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	80 93 c2 00 	sts	0x00C2, r24
 278:	08 95       	ret

0000027a <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	2f 93       	push	r18
 286:	8f 93       	push	r24
 288:	9f 93       	push	r25
 28a:	ef 93       	push	r30
 28c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 28e:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 292:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 296:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 298:	e0 91 02 01 	lds	r30, 0x0102
 29c:	ef 5f       	subi	r30, 0xFF	; 255
 29e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 2a0:	90 91 01 01 	lds	r25, 0x0101
 2a4:	e9 17       	cp	r30, r25
 2a6:	39 f0       	breq	.+14     	; 0x2b6 <__vector_28+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 2a8:	e0 93 02 01 	sts	0x0102, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	eb 5f       	subi	r30, 0xFB	; 251
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	20 83       	st	Z, r18
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <__vector_28+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 2b6:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 2b8:	90 91 00 01 	lds	r25, 0x0100
 2bc:	89 2b       	or	r24, r25
 2be:	80 93 00 01 	sts	0x0100, r24
}
 2c2:	ff 91       	pop	r31
 2c4:	ef 91       	pop	r30
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 2e8:	90 91 04 01 	lds	r25, 0x0104
 2ec:	80 91 03 01 	lds	r24, 0x0103
 2f0:	98 17       	cp	r25, r24
 2f2:	69 f0       	breq	.+26     	; 0x30e <__vector_29+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 2f4:	e0 91 03 01 	lds	r30, 0x0103
 2f8:	ef 5f       	subi	r30, 0xFF	; 255
 2fa:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 2fc:	e0 93 03 01 	sts	0x0103, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	eb 5d       	subi	r30, 0xDB	; 219
 304:	fe 4f       	sbci	r31, 0xFE	; 254
 306:	80 81       	ld	r24, Z
 308:	80 93 ce 00 	sts	0x00CE, r24
 30c:	05 c0       	rjmp	.+10     	; 0x318 <__vector_29+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 30e:	e9 ec       	ldi	r30, 0xC9	; 201
 310:	f0 e0       	ldi	r31, 0x00	; 0
 312:	80 81       	ld	r24, Z
 314:	8f 7d       	andi	r24, 0xDF	; 223
 316:	80 83       	st	Z, r24
    }
}
 318:	ff 91       	pop	r31
 31a:	ef 91       	pop	r30
 31c:	9f 91       	pop	r25
 31e:	8f 91       	pop	r24
 320:	0f 90       	pop	r0
 322:	0f be       	out	0x3f, r0	; 63
 324:	0f 90       	pop	r0
 326:	1f 90       	pop	r1
 328:	18 95       	reti

0000032a <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
 32a:	10 92 04 01 	sts	0x0104, r1
    UART1_TxTail = 0;
 32e:	10 92 03 01 	sts	0x0103, r1
    UART1_RxHead = 0;
 332:	10 92 02 01 	sts	0x0102, r1
    UART1_RxTail = 0;
 336:	10 92 01 01 	sts	0x0101, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 33a:	99 23       	and	r25, r25
 33c:	1c f4       	brge	.+6      	; 0x344 <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
 33e:	22 e0       	ldi	r18, 0x02	; 2
 340:	20 93 c8 00 	sts	0x00C8, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 344:	90 78       	andi	r25, 0x80	; 128
 346:	90 93 cd 00 	sts	0x00CD, r25
    UART1_UBRRL = (unsigned char) baudrate;
 34a:	80 93 cc 00 	sts	0x00CC, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
 34e:	88 e9       	ldi	r24, 0x98	; 152
 350:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
 354:	86 e0       	ldi	r24, 0x06	; 6
 356:	80 93 ca 00 	sts	0x00CA, r24
 35a:	08 95       	ret

0000035c <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 35c:	20 91 04 01 	lds	r18, 0x0104
 360:	2f 5f       	subi	r18, 0xFF	; 255
 362:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 364:	90 91 03 01 	lds	r25, 0x0103
 368:	29 17       	cp	r18, r25
 36a:	e1 f3       	breq	.-8      	; 0x364 <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 36c:	e2 2f       	mov	r30, r18
 36e:	f0 e0       	ldi	r31, 0x00	; 0
 370:	eb 5d       	subi	r30, 0xDB	; 219
 372:	fe 4f       	sbci	r31, 0xFE	; 254
 374:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 376:	20 93 04 01 	sts	0x0104, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 37a:	e9 ec       	ldi	r30, 0xC9	; 201
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	80 81       	ld	r24, Z
 380:	80 62       	ori	r24, 0x20	; 32
 382:	80 83       	st	Z, r24
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
