
AX18ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002da  0000036e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008a  00800104  00800104  00000372  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000372  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000072a  00000000  00000000  0000044a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000225  00000000  00000000  00000b74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000355  00000000  00000000  00000d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001d0  00000000  00000000  000010f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000340  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000653  00000000  00000000  00001600  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_20>
  54:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_28>
  74:	0c 94 41 01 	jmp	0x282	; 0x282 <__vector_29>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ed       	ldi	r30, 0xDA	; 218
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	ae 38       	cpi	r26, 0x8E	; 142
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
#include "IOPorts_ATMega.h"
#include "uart.h"

int main(void)
{
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  ba:	87 e6       	ldi	r24, 0x67	; 103
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 d6 00 	call	0x1ac	; 0x1ac <uart_init>
	
	DDRB = 0xFF;
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	84 b9       	out	0x04, r24	; 4

	sei();
  c6:	78 94       	sei
	while(1) //infinite loop
	{
		PORTB = PIN0_bm;
  c8:	c1 e0       	ldi	r28, 0x01	; 1
  ca:	c5 b9       	out	0x05, r28	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ed       	ldi	r24, 0xD3	; 211
  d0:	90 e3       	ldi	r25, 0x30	; 48
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x18>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x22>
  dc:	00 00       	nop
		_delay_ms(1000); 
		PORTB = 0x00; 
  de:	15 b8       	out	0x05, r1	; 5
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x2c>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x36>
  f0:	00 00       	nop
		_delay_ms(1000);
		uart_puts("hoi");
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 04 01 	call	0x208	; 0x208 <uart_puts>
  fa:	e7 cf       	rjmp	.-50     	; 0xca <main+0x10>

000000fc <__vector_20>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
  fc:	1f 92       	push	r1
  fe:	0f 92       	push	r0
 100:	0f b6       	in	r0, 0x3f	; 63
 102:	0f 92       	push	r0
 104:	11 24       	eor	r1, r1
 106:	2f 93       	push	r18
 108:	8f 93       	push	r24
 10a:	9f 93       	push	r25
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 110:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 114:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 118:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 11a:	e0 91 4b 01 	lds	r30, 0x014B
 11e:	ef 5f       	subi	r30, 0xFF	; 255
 120:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 122:	90 91 4a 01 	lds	r25, 0x014A
 126:	e9 17       	cp	r30, r25
 128:	39 f0       	breq	.+14     	; 0x138 <__vector_20+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 12a:	e0 93 4b 01 	sts	0x014B, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	e2 5b       	subi	r30, 0xB2	; 178
 132:	fe 4f       	sbci	r31, 0xFE	; 254
 134:	20 83       	st	Z, r18
 136:	01 c0       	rjmp	.+2      	; 0x13a <__vector_20+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 138:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 13a:	90 91 49 01 	lds	r25, 0x0149
 13e:	89 2b       	or	r24, r25
 140:	80 93 49 01 	sts	0x0149, r24
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	9f 91       	pop	r25
 14a:	8f 91       	pop	r24
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_21>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 16a:	90 91 4d 01 	lds	r25, 0x014D
 16e:	80 91 4c 01 	lds	r24, 0x014C
 172:	98 17       	cp	r25, r24
 174:	69 f0       	breq	.+26     	; 0x190 <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 176:	e0 91 4c 01 	lds	r30, 0x014C
 17a:	ef 5f       	subi	r30, 0xFF	; 255
 17c:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 17e:	e0 93 4c 01 	sts	0x014C, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	e2 59       	subi	r30, 0x92	; 146
 186:	fe 4f       	sbci	r31, 0xFE	; 254
 188:	80 81       	ld	r24, Z
 18a:	80 93 c6 00 	sts	0x00C6, r24
 18e:	05 c0       	rjmp	.+10     	; 0x19a <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 190:	e1 ec       	ldi	r30, 0xC1	; 193
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8f 7d       	andi	r24, 0xDF	; 223
 198:	80 83       	st	Z, r24
    }
}
 19a:	ff 91       	pop	r31
 19c:	ef 91       	pop	r30
 19e:	9f 91       	pop	r25
 1a0:	8f 91       	pop	r24
 1a2:	0f 90       	pop	r0
 1a4:	0f be       	out	0x3f, r0	; 63
 1a6:	0f 90       	pop	r0
 1a8:	1f 90       	pop	r1
 1aa:	18 95       	reti

000001ac <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 1ac:	10 92 4d 01 	sts	0x014D, r1
    UART_TxTail = 0;
 1b0:	10 92 4c 01 	sts	0x014C, r1
    UART_RxHead = 0;
 1b4:	10 92 4b 01 	sts	0x014B, r1
    UART_RxTail = 0;
 1b8:	10 92 4a 01 	sts	0x014A, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 1bc:	99 23       	and	r25, r25
 1be:	1c f4       	brge	.+6      	; 0x1c6 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 1c0:	22 e0       	ldi	r18, 0x02	; 2
 1c2:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 1c6:	90 78       	andi	r25, 0x80	; 128
 1c8:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 1cc:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 1d0:	88 e9       	ldi	r24, 0x98	; 152
 1d2:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 c2 00 	sts	0x00C2, r24
 1dc:	08 95       	ret

000001de <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 1de:	20 91 4d 01 	lds	r18, 0x014D
 1e2:	2f 5f       	subi	r18, 0xFF	; 255
 1e4:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 1e6:	90 91 4c 01 	lds	r25, 0x014C
 1ea:	29 17       	cp	r18, r25
 1ec:	e1 f3       	breq	.-8      	; 0x1e6 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 1ee:	e2 2f       	mov	r30, r18
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	e2 59       	subi	r30, 0x92	; 146
 1f4:	fe 4f       	sbci	r31, 0xFE	; 254
 1f6:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 1f8:	20 93 4d 01 	sts	0x014D, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 1fc:	e1 ec       	ldi	r30, 0xC1	; 193
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	80 81       	ld	r24, Z
 202:	80 62       	ori	r24, 0x20	; 32
 204:	80 83       	st	Z, r24
 206:	08 95       	ret

00000208 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 208:	cf 93       	push	r28
 20a:	df 93       	push	r29
 20c:	ec 01       	movw	r28, r24
    while (*s) 
 20e:	88 81       	ld	r24, Y
 210:	88 23       	and	r24, r24
 212:	31 f0       	breq	.+12     	; 0x220 <uart_puts+0x18>
 214:	21 96       	adiw	r28, 0x01	; 1
      uart_putc(*s++);
 216:	0e 94 ef 00 	call	0x1de	; 0x1de <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 21a:	89 91       	ld	r24, Y+
 21c:	81 11       	cpse	r24, r1
 21e:	fb cf       	rjmp	.-10     	; 0x216 <uart_puts+0xe>
      uart_putc(*s++);

}/* uart_puts */
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	ef 93       	push	r30
 238:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 23a:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 23e:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 242:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 244:	e0 91 06 01 	lds	r30, 0x0106
 248:	ef 5f       	subi	r30, 0xFF	; 255
 24a:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 24c:	90 91 05 01 	lds	r25, 0x0105
 250:	e9 17       	cp	r30, r25
 252:	39 f0       	breq	.+14     	; 0x262 <__vector_28+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 254:	e0 93 06 01 	sts	0x0106, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e7 5f       	subi	r30, 0xF7	; 247
 25c:	fe 4f       	sbci	r31, 0xFE	; 254
 25e:	20 83       	st	Z, r18
 260:	01 c0       	rjmp	.+2      	; 0x264 <__vector_28+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 262:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 264:	90 91 04 01 	lds	r25, 0x0104
 268:	89 2b       	or	r24, r25
 26a:	80 93 04 01 	sts	0x0104, r24
}
 26e:	ff 91       	pop	r31
 270:	ef 91       	pop	r30
 272:	9f 91       	pop	r25
 274:	8f 91       	pop	r24
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
 290:	ef 93       	push	r30
 292:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 294:	90 91 08 01 	lds	r25, 0x0108
 298:	80 91 07 01 	lds	r24, 0x0107
 29c:	98 17       	cp	r25, r24
 29e:	69 f0       	breq	.+26     	; 0x2ba <__vector_29+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 2a0:	e0 91 07 01 	lds	r30, 0x0107
 2a4:	ef 5f       	subi	r30, 0xFF	; 255
 2a6:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 2a8:	e0 93 07 01 	sts	0x0107, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	e7 5d       	subi	r30, 0xD7	; 215
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	80 81       	ld	r24, Z
 2b4:	80 93 ce 00 	sts	0x00CE, r24
 2b8:	05 c0       	rjmp	.+10     	; 0x2c4 <__vector_29+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 2ba:	e9 ec       	ldi	r30, 0xC9	; 201
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	8f 7d       	andi	r24, 0xDF	; 223
 2c2:	80 83       	st	Z, r24
    }
}
 2c4:	ff 91       	pop	r31
 2c6:	ef 91       	pop	r30
 2c8:	9f 91       	pop	r25
 2ca:	8f 91       	pop	r24
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <_exit>:
 2d6:	f8 94       	cli

000002d8 <__stop_program>:
 2d8:	ff cf       	rjmp	.-2      	; 0x2d8 <__stop_program>
