
AX18ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000a1a  00000aae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000090  00800182  00800182  00000b30  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000b30  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a9d  00000000  00000000  00000d9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000069c  00000000  00000000  00002839  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000077d  00000000  00000000  00002ed5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005a4  00000000  00000000  00003654  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068c  00000000  00000000  00003bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017fb  00000000  00000000  00004284  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d0  00000000  00000000  00005a7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__vector_20>
  54:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_21>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 ba 01 	jmp	0x374	; 0x374 <__vector_28>
  74:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <__vector_29>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea e1       	ldi	r30, 0x1A	; 26
  90:	fa e0       	ldi	r31, 0x0A	; 10
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 38       	cpi	r26, 0x82	; 130
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	22 e0       	ldi	r18, 0x02	; 2
  a0:	a2 e8       	ldi	r26, 0x82	; 130
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a2 31       	cpi	r26, 0x12	; 18
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
FILE uartFileStream = FDEV_SETUP_STREAM(uart_printChar, NULL, _FDEV_SETUP_RW);


int main(void)
{
	uart_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 87 01 	call	0x30e	; 0x30e <uart_init>
	uart1_init(UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU));
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	0e 94 12 02 	call	0x424	; 0x424 <uart1_init>
	stdout = &uartFileStream;
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	90 93 0f 02 	sts	0x020F, r25
  d2:	80 93 0e 02 	sts	0x020E, r24


	sei();
  d6:	78 94       	sei
	
	AX18SetSpeed(BROADCAST_ID, 250);
  d8:	4a ef       	ldi	r20, 0xFA	; 250
  da:	50 e0       	ldi	r21, 0x00	; 0
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	8e ef       	ldi	r24, 0xFE	; 254
  e2:	0e 94 1c 01 	call	0x238	; 0x238 <AX18SetSpeed>
	while(1) //infinite loop
	{
		AX18SetPosition(BROADCAST_ID, 200);
  e6:	48 ec       	ldi	r20, 0xC8	; 200
  e8:	50 e0       	ldi	r21, 0x00	; 0
  ea:	60 e0       	ldi	r22, 0x00	; 0
  ec:	70 e0       	ldi	r23, 0x00	; 0
  ee:	8e ef       	ldi	r24, 0xFE	; 254
  f0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AX18SetPosition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	2f ef       	ldi	r18, 0xFF	; 255
  f6:	83 ed       	ldi	r24, 0xD3	; 211
  f8:	90 e3       	ldi	r25, 0x30	; 48
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x40>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x4a>
 104:	00 00       	nop
		_delay_ms(1000);
		AX18SetPosition(BROADCAST_ID, 800);
 106:	40 e2       	ldi	r20, 0x20	; 32
 108:	53 e0       	ldi	r21, 0x03	; 3
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	8e ef       	ldi	r24, 0xFE	; 254
 110:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <AX18SetPosition>
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x60>
 122:	00 c0       	rjmp	.+0      	; 0x124 <main+0x6a>
 124:	00 00       	nop
 126:	df cf       	rjmp	.-66     	; 0xe6 <main+0x2c>

00000128 <generateTxChecksum>:

	// Loop trough all received bytes
	while(uart1_canRead() > 0) {
		printf("Buffer size: %d\r\n", uart1_canRead());
		char c = uart1_getc();
		printf("READ (0x%x) STATE (%d)", c, RxState);
 128:	d9 01       	movw	r26, r18
 12a:	6c 5f       	subi	r22, 0xFC	; 252
 12c:	86 0f       	add	r24, r22
 12e:	82 0f       	add	r24, r18
 130:	10 97       	sbiw	r26, 0x00	; 0
 132:	69 f0       	breq	.+26     	; 0x14e <generateTxChecksum+0x26>
 134:	e0 e0       	ldi	r30, 0x00	; 0
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0

		switch(RxState) {
 13a:	e4 0f       	add	r30, r20
 13c:	f5 1f       	adc	r31, r21
 13e:	30 81       	ld	r19, Z
 140:	83 0f       	add	r24, r19
 142:	9f 5f       	subi	r25, 0xFF	; 255
 144:	e9 2f       	mov	r30, r25
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	ea 17       	cp	r30, r26
 14a:	fb 07       	cpc	r31, r27
 14c:	b0 f3       	brcs	.-20     	; 0x13a <generateTxChecksum+0x12>
 14e:	80 95       	com	r24
 150:	08 95       	ret

00000152 <AX18FWrite>:
 152:	bf 92       	push	r11
 154:	cf 92       	push	r12
 156:	df 92       	push	r13
				}
			break;

			// 4) Length byte
			case 3:
				RxLength = c;
 158:	ef 92       	push	r14
				RxState = 4;
 15a:	ff 92       	push	r15
 15c:	0f 93       	push	r16

		switch(RxState) {

			// 1) First Start byte
			case 0:
				if(c == AX_START) {
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	c8 2e       	mov	r12, r24
 166:	b6 2e       	mov	r11, r22
				}
			break;

			// 2) Second start byte
			case 1:
				if(c == AX_START) {
 168:	7a 01       	movw	r14, r20
 16a:	d2 2e       	mov	r13, r18
					RxState = 2;
				} else {
					RxState = 0;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
				}
			break;

			// 3) Id byte
			case 2:
				if(c != AX_START) {
 172:	8f ef       	ldi	r24, 0xFF	; 255
					RxServoId = c;
 174:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
					RxState = 3;
 178:	8c 2d       	mov	r24, r12
				RxState = 4;
			break;

			// 5) Error byte
			case 4:
				RxError = c;
 17a:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
				RxState = 5;
			break;
 17e:	83 e0       	ldi	r24, 0x03	; 3

			// Data bytes and checksum byte
			case 5:
				if(RxDataCount > RxLength) {
 180:	8d 0d       	add	r24, r13
 182:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
					RxChecksum = c;
					RxState = 6;
					break;
				}

				buffer[RxDataCount++] = c;
 186:	83 e0       	ldi	r24, 0x03	; 3
 188:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
 18c:	8b 2d       	mov	r24, r11
 18e:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
			break;

			// There is no state 5 unless we got more data then expected...
			case 6:
				Error = 1;
 192:	dd 20       	and	r13, r13
 194:	71 f0       	breq	.+28     	; 0x1b2 <AX18FWrite+0x60>
			break;
 196:	e7 01       	movw	r28, r14
			break;

			// 2) Second start byte
			case 1:
				if(c == AX_START) {
					RxState = 2;
 198:	0f ef       	ldi	r16, 0xFF	; 255
 19a:	0d 0d       	add	r16, r13
				if(c != AX_START) {
					RxServoId = c;
					RxState = 3;
				} else {
					RxState = 0;
					Error = 1;
 19c:	10 e0       	ldi	r17, 0x00	; 0
 19e:	0f 5f       	subi	r16, 0xFF	; 255
			case 2:
				if(c != AX_START) {
					RxServoId = c;
					RxState = 3;
				} else {
					RxState = 0;
 1a0:	1f 4f       	sbci	r17, 0xFF	; 255
 1a2:	0e 0d       	add	r16, r14
			break;

			// Data bytes and checksum byte
			case 5:
				if(RxDataCount > RxLength) {
					RxChecksum = c;
 1a4:	1f 1d       	adc	r17, r15
					RxState = 6;
 1a6:	89 91       	ld	r24, Y+
	// Wait a couple of micro seconds to receive some data
	_delay_ms(50);
	_delay_us(TX_READ_DELAY_TIME);

	// Loop trough all received bytes
	while(uart1_canRead() > 0) {
 1a8:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
 1ac:	c0 17       	cp	r28, r16
 1ae:	d1 07       	cpc	r29, r17
 1b0:	d1 f7       	brne	.-12     	; 0x1a6 <AX18FWrite+0x54>

		}
	}

	// Check if packet is correct by comparing the checksum
	if(generateRxChecksum(RxServoId, RxError, address, buffer, length) != RxChecksum) {
 1b2:	2d 2d       	mov	r18, r13
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	a7 01       	movw	r20, r14
 1b8:	6b 2d       	mov	r22, r11
 1ba:	8c 2d       	mov	r24, r12
 1bc:	0e 94 94 00 	call	0x128	; 0x128 <generateTxChecksum>
 1c0:	0e 94 2b 02 	call	0x456	; 0x456 <uart1_putc>
		Error = 1;
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
	}

	return Error;
	
}
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	08 95       	ret

000001d8 <AX18SetPosition>:
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	00 d0       	rcall	.+0      	; 0x1e4 <AX18SetPosition+0xc>
 1e4:	cd b7       	in	r28, 0x3d	; 61
 1e6:	de b7       	in	r29, 0x3e	; 62
 1e8:	f8 2e       	mov	r15, r24
 1ea:	49 83       	std	Y+1, r20	; 0x01
 1ec:	05 2f       	mov	r16, r21
 1ee:	16 2f       	mov	r17, r22
 1f0:	27 2f       	mov	r18, r23
 1f2:	33 27       	eor	r19, r19
 1f4:	0a 83       	std	Y+2, r16	; 0x02
void AX18SetPosition(unsigned char id, unsigned long pos) {

	unsigned char buffer[2] = {
		unsigned16ToUnsigned8Lower(pos),
		unsigned16ToUnsigned8Higher(pos)};
	printf("Set position: %d (0x%x, 0x%x)\r\n", (int)pos, buffer[0], buffer[1]);
 1f6:	1f 92       	push	r1
 1f8:	0f 93       	push	r16
 1fa:	1f 92       	push	r1
 1fc:	4f 93       	push	r20
 1fe:	5f 93       	push	r21
 200:	4f 93       	push	r20
 202:	22 e6       	ldi	r18, 0x62	; 98
 204:	31 e0       	ldi	r19, 0x01	; 1
 206:	3f 93       	push	r19
 208:	2f 93       	push	r18
 20a:	0e 94 40 02 	call	0x480	; 0x480 <printf>

	AX18FWrite(id, AX_GOAL_POSITION_L, buffer, 2);
 20e:	22 e0       	ldi	r18, 0x02	; 2
 210:	ae 01       	movw	r20, r28
 212:	4f 5f       	subi	r20, 0xFF	; 255
 214:	5f 4f       	sbci	r21, 0xFF	; 255
 216:	6e e1       	ldi	r22, 0x1E	; 30
 218:	8f 2d       	mov	r24, r15
 21a:	0e 94 a9 00 	call	0x152	; 0x152 <AX18FWrite>
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	f8 94       	cli
 222:	de bf       	out	0x3e, r29	; 62
 224:	0f be       	out	0x3f, r0	; 63
 226:	cd bf       	out	0x3d, r28	; 61
}
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	08 95       	ret

00000238 <AX18SetSpeed>:
/**
 * Set speed of servo. This speed will be used in both JOIN and WHEEL mode.
 * @param id    Servo identifier
 * @param speed Speed
 */
void AX18SetSpeed(unsigned char id, unsigned long speed) {
 238:	cf 93       	push	r28
 23a:	df 93       	push	r29
 23c:	00 d0       	rcall	.+0      	; 0x23e <AX18SetSpeed+0x6>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 * Returns lower byte of unsigned 16 bit value
 * @param  data 16 bit unsigned value
 * @return      lower byte
 */
unsigned char unsigned16ToUnsigned8Lower(unsigned long data) {
	return data & 0xFF;
 242:	49 83       	std	Y+1, r20	; 0x01
 * Returns higher byte of unsigned 16 bit value
 * @param  data 16 bit unsigned value
 * @return      higher byte
 */
unsigned char unsigned16ToUnsigned8Higher(unsigned long data) {
	return (data >> 8) & 0xFF; 
 244:	5a 83       	std	Y+2, r21	; 0x02
void AX18SetSpeed(unsigned char id, unsigned long speed) {
	unsigned char buffer[2] = {
		unsigned16ToUnsigned8Lower(speed), 
		unsigned16ToUnsigned8Higher(speed)};

	AX18FWrite(id, AX_GOAL_SPEED_L, buffer, 2);
 246:	22 e0       	ldi	r18, 0x02	; 2
 248:	ae 01       	movw	r20, r28
 24a:	4f 5f       	subi	r20, 0xFF	; 255
 24c:	5f 4f       	sbci	r21, 0xFF	; 255
 24e:	60 e2       	ldi	r22, 0x20	; 32
 250:	0e 94 a9 00 	call	0x152	; 0x152 <AX18FWrite>
}
 254:	0f 90       	pop	r0
 256:	0f 90       	pop	r0
 258:	df 91       	pop	r29
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <__vector_20>:
ISR (UART0_RECEIVE_INTERRUPT)	
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 25e:	1f 92       	push	r1
 260:	0f 92       	push	r0
 262:	0f b6       	in	r0, 0x3f	; 63
 264:	0f 92       	push	r0
 266:	11 24       	eor	r1, r1
 268:	2f 93       	push	r18
 26a:	8f 93       	push	r24
 26c:	9f 93       	push	r25
 26e:	ef 93       	push	r30
 270:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */
    usr  = UART0_STATUS;
 272:	80 91 c0 00 	lds	r24, 0x00C0
    data = UART0_DATA;
 276:	20 91 c6 00 	lds	r18, 0x00C6
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
#if defined(FE) && defined(DOR) && defined(UPE)
    lastRxError = usr & (_BV(FE)|_BV(DOR)|_BV(UPE) );
#elif defined(FE0) && defined(DOR0) && defined(UPE0)
    lastRxError = usr & (_BV(FE0)|_BV(DOR0)|_BV(UPE0) );
 27a:	8c 71       	andi	r24, 0x1C	; 28
#elif defined(FE) && defined(DOR)
    lastRxError = usr & (_BV(FE)|_BV(DOR) );
#endif

    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 27c:	e0 91 c9 01 	lds	r30, 0x01C9
 280:	ef 5f       	subi	r30, 0xFF	; 255
 282:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 284:	90 91 c8 01 	lds	r25, 0x01C8
 288:	e9 17       	cp	r30, r25
 28a:	39 f0       	breq	.+14     	; 0x29a <__vector_20+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 28c:	e0 93 c9 01 	sts	0x01C9, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	e4 53       	subi	r30, 0x34	; 52
 294:	fe 4f       	sbci	r31, 0xFE	; 254
 296:	20 83       	st	Z, r18
 298:	01 c0       	rjmp	.+2      	; 0x29c <__vector_20+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 29a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError |= lastRxError;   
 29c:	90 91 c7 01 	lds	r25, 0x01C7
 2a0:	89 2b       	or	r24, r25
 2a2:	80 93 c7 01 	sts	0x01C7, r24
}
 2a6:	ff 91       	pop	r31
 2a8:	ef 91       	pop	r30
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	2f 91       	pop	r18
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_21>:
ISR (UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 2cc:	90 91 cb 01 	lds	r25, 0x01CB
 2d0:	80 91 ca 01 	lds	r24, 0x01CA
 2d4:	98 17       	cp	r25, r24
 2d6:	69 f0       	breq	.+26     	; 0x2f2 <__vector_21+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 2d8:	e0 91 ca 01 	lds	r30, 0x01CA
 2dc:	ef 5f       	subi	r30, 0xFF	; 255
 2de:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 2e0:	e0 93 ca 01 	sts	0x01CA, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e4 51       	subi	r30, 0x14	; 20
 2e8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ea:	80 81       	ld	r24, Z
 2ec:	80 93 c6 00 	sts	0x00C6, r24
 2f0:	05 c0       	rjmp	.+10     	; 0x2fc <__vector_21+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 2f2:	e1 ec       	ldi	r30, 0xC1	; 193
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	80 83       	st	Z, r24
    }
}
 2fc:	ff 91       	pop	r31
 2fe:	ef 91       	pop	r30
 300:	9f 91       	pop	r25
 302:	8f 91       	pop	r24
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 30e:	10 92 cb 01 	sts	0x01CB, r1
    UART_TxTail = 0;
 312:	10 92 ca 01 	sts	0x01CA, r1
    UART_RxHead = 0;
 316:	10 92 c9 01 	sts	0x01C9, r1
    UART_RxTail = 0;
 31a:	10 92 c8 01 	sts	0x01C8, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 )
 31e:	99 23       	and	r25, r25
 320:	1c f4       	brge	.+6      	; 0x328 <uart_init+0x1a>
    {
        #if UART0_BIT_U2X
        UART0_STATUS = (1<<UART0_BIT_U2X);  //Enable 2x speed 
 322:	22 e0       	ldi	r18, 0x02	; 2
 324:	20 93 c0 00 	sts	0x00C0, r18
        #endif
    } 
    #if defined(UART0_UBRRH)
    UART0_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 328:	90 78       	andi	r25, 0x80	; 128
 32a:	90 93 c5 00 	sts	0x00C5, r25
    #endif    
    UART0_UBRRL = (unsigned char) (baudrate&0x00FF);
 32e:	80 93 c4 00 	sts	0x00C4, r24
      
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(UART0_BIT_RXCIE)|(1<<UART0_BIT_RXEN)|(1<<UART0_BIT_TXEN);
 332:	88 e9       	ldi	r24, 0x98	; 152
 334:	80 93 c1 00 	sts	0x00C1, r24
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef UART0_CONTROLC
    #ifdef UART0_BIT_URSEL
    UART0_CONTROLC = (1<<UART0_BIT_URSEL)|(1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
    #else
    UART0_CONTROLC = (1<<UART0_BIT_UCSZ1)|(1<<UART0_BIT_UCSZ0);
 338:	86 e0       	ldi	r24, 0x06	; 6
 33a:	80 93 c2 00 	sts	0x00C2, r24
 33e:	08 95       	ret

00000340 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 340:	20 91 cb 01 	lds	r18, 0x01CB
 344:	2f 5f       	subi	r18, 0xFF	; 255
 346:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 348:	90 91 ca 01 	lds	r25, 0x01CA
 34c:	29 17       	cp	r18, r25
 34e:	e1 f3       	breq	.-8      	; 0x348 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 350:	e2 2f       	mov	r30, r18
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	e4 51       	subi	r30, 0x14	; 20
 356:	fe 4f       	sbci	r31, 0xFE	; 254
 358:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 35a:	20 93 cb 01 	sts	0x01CB, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 35e:	e1 ec       	ldi	r30, 0xC1	; 193
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	80 62       	ori	r24, 0x20	; 32
 366:	80 83       	st	Z, r24
 368:	08 95       	ret

0000036a <uart_printChar>:

}/* uart_puts */

int uart_printChar(char character, FILE *stream)
{
  uart_putc(character);
 36a:	0e 94 a0 01 	call	0x340	; 0x340 <uart_putc>

  return 0;
}
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	08 95       	ret

00000374 <__vector_28>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 374:	1f 92       	push	r1
 376:	0f 92       	push	r0
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	0f 92       	push	r0
 37c:	11 24       	eor	r1, r1
 37e:	2f 93       	push	r18
 380:	8f 93       	push	r24
 382:	9f 93       	push	r25
 384:	ef 93       	push	r30
 386:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 388:	80 91 c8 00 	lds	r24, 0x00C8
    data = UART1_DATA;
 38c:	20 91 ce 00 	lds	r18, 0x00CE
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 390:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 392:	e0 91 84 01 	lds	r30, 0x0184
 396:	ef 5f       	subi	r30, 0xFF	; 255
 398:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 39a:	90 91 83 01 	lds	r25, 0x0183
 39e:	e9 17       	cp	r30, r25
 3a0:	39 f0       	breq	.+14     	; 0x3b0 <__vector_28+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 3a2:	e0 93 84 01 	sts	0x0184, r30
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	e9 57       	subi	r30, 0x79	; 121
 3aa:	fe 4f       	sbci	r31, 0xFE	; 254
 3ac:	20 83       	st	Z, r18
 3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <__vector_28+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 3b0:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 3b2:	90 91 82 01 	lds	r25, 0x0182
 3b6:	89 2b       	or	r24, r25
 3b8:	80 93 82 01 	sts	0x0182, r24
}
 3bc:	ff 91       	pop	r31
 3be:	ef 91       	pop	r30
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	2f 91       	pop	r18
 3c6:	0f 90       	pop	r0
 3c8:	0f be       	out	0x3f, r0	; 63
 3ca:	0f 90       	pop	r0
 3cc:	1f 90       	pop	r1
 3ce:	18 95       	reti

000003d0 <__vector_29>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 3d0:	1f 92       	push	r1
 3d2:	0f 92       	push	r0
 3d4:	0f b6       	in	r0, 0x3f	; 63
 3d6:	0f 92       	push	r0
 3d8:	11 24       	eor	r1, r1
 3da:	8f 93       	push	r24
 3dc:	9f 93       	push	r25
 3de:	ef 93       	push	r30
 3e0:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 3e2:	90 91 86 01 	lds	r25, 0x0186
 3e6:	80 91 85 01 	lds	r24, 0x0185
 3ea:	98 17       	cp	r25, r24
 3ec:	69 f0       	breq	.+26     	; 0x408 <__vector_29+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 3ee:	e0 91 85 01 	lds	r30, 0x0185
 3f2:	ef 5f       	subi	r30, 0xFF	; 255
 3f4:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 3f6:	e0 93 85 01 	sts	0x0185, r30
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	e9 55       	subi	r30, 0x59	; 89
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 81       	ld	r24, Z
 402:	80 93 ce 00 	sts	0x00CE, r24
 406:	05 c0       	rjmp	.+10     	; 0x412 <__vector_29+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 408:	e9 ec       	ldi	r30, 0xC9	; 201
 40a:	f0 e0       	ldi	r31, 0x00	; 0
 40c:	80 81       	ld	r24, Z
 40e:	8f 7d       	andi	r24, 0xDF	; 223
 410:	80 83       	st	Z, r24
    }
}
 412:	ff 91       	pop	r31
 414:	ef 91       	pop	r30
 416:	9f 91       	pop	r25
 418:	8f 91       	pop	r24
 41a:	0f 90       	pop	r0
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	0f 90       	pop	r0
 420:	1f 90       	pop	r1
 422:	18 95       	reti

00000424 <uart1_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart1_init(unsigned int baudrate)
{
    UART1_TxHead = 0;
 424:	10 92 86 01 	sts	0x0186, r1
    UART1_TxTail = 0;
 428:	10 92 85 01 	sts	0x0185, r1
    UART1_RxHead = 0;
 42c:	10 92 84 01 	sts	0x0184, r1
    UART1_RxTail = 0;
 430:	10 92 83 01 	sts	0x0183, r1
#endif
#endif
#endif

    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 434:	99 23       	and	r25, r25
 436:	1c f4       	brge	.+6      	; 0x43e <uart1_init+0x1a>
    {
        #if UART1_BIT_U2X
    	UART1_STATUS = (1<<UART1_BIT_U2X);  //Enable 2x speed 
 438:	22 e0       	ldi	r18, 0x02	; 2
 43a:	20 93 c8 00 	sts	0x00C8, r18
        #endif
    }
    UART1_UBRRH = (unsigned char)((baudrate>>8)&0x80) ;
 43e:	90 78       	andi	r25, 0x80	; 128
 440:	90 93 cd 00 	sts	0x00CD, r25
    UART1_UBRRL = (unsigned char) baudrate;
 444:	80 93 cc 00 	sts	0x00CC, r24
        
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART1_CONTROL = _BV(UART1_BIT_RXCIE)|(1<<UART1_BIT_RXEN)|(1<<UART1_BIT_TXEN);    
 448:	88 e9       	ldi	r24, 0x98	; 152
 44a:	80 93 c9 00 	sts	0x00C9, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */   
    #ifdef UART1_BIT_URSEL
    UART1_CONTROLC = (1<<UART1_BIT_URSEL)|(1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
    #else
    UART1_CONTROLC = (1<<UART1_BIT_UCSZ1)|(1<<UART1_BIT_UCSZ0);
 44e:	86 e0       	ldi	r24, 0x06	; 6
 450:	80 93 ca 00 	sts	0x00CA, r24
 454:	08 95       	ret

00000456 <uart1_putc>:
void uart1_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART1_TxHead + 1) & UART_TX_BUFFER_MASK;
 456:	20 91 86 01 	lds	r18, 0x0186
 45a:	2f 5f       	subi	r18, 0xFF	; 255
 45c:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART1_TxTail ){
 45e:	90 91 85 01 	lds	r25, 0x0185
 462:	29 17       	cp	r18, r25
 464:	e1 f3       	breq	.-8      	; 0x45e <uart1_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART1_TxBuf[tmphead] = data;
 466:	e2 2f       	mov	r30, r18
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	e9 55       	subi	r30, 0x59	; 89
 46c:	fe 4f       	sbci	r31, 0xFE	; 254
 46e:	80 83       	st	Z, r24
    UART1_TxHead = tmphead;
 470:	20 93 86 01 	sts	0x0186, r18

    /* enable UDRE interrupt */
    UART1_CONTROL    |= _BV(UART1_UDRIE);
 474:	e9 ec       	ldi	r30, 0xC9	; 201
 476:	f0 e0       	ldi	r31, 0x00	; 0
 478:	80 81       	ld	r24, Z
 47a:	80 62       	ori	r24, 0x20	; 32
 47c:	80 83       	st	Z, r24
 47e:	08 95       	ret

00000480 <printf>:
 480:	a0 e0       	ldi	r26, 0x00	; 0
 482:	b0 e0       	ldi	r27, 0x00	; 0
 484:	e6 e4       	ldi	r30, 0x46	; 70
 486:	f2 e0       	ldi	r31, 0x02	; 2
 488:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__prologue_saves__+0x20>
 48c:	ae 01       	movw	r20, r28
 48e:	4b 5f       	subi	r20, 0xFB	; 251
 490:	5f 4f       	sbci	r21, 0xFF	; 255
 492:	fa 01       	movw	r30, r20
 494:	61 91       	ld	r22, Z+
 496:	71 91       	ld	r23, Z+
 498:	af 01       	movw	r20, r30
 49a:	80 91 0e 02 	lds	r24, 0x020E
 49e:	90 91 0f 02 	lds	r25, 0x020F
 4a2:	0e 94 56 02 	call	0x4ac	; 0x4ac <vfprintf>
 4a6:	e2 e0       	ldi	r30, 0x02	; 2
 4a8:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__epilogue_restores__+0x20>

000004ac <vfprintf>:
 4ac:	ac e0       	ldi	r26, 0x0C	; 12
 4ae:	b0 e0       	ldi	r27, 0x00	; 0
 4b0:	ec e5       	ldi	r30, 0x5C	; 92
 4b2:	f2 e0       	ldi	r31, 0x02	; 2
 4b4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__prologue_saves__>
 4b8:	7c 01       	movw	r14, r24
 4ba:	6b 01       	movw	r12, r22
 4bc:	8a 01       	movw	r16, r20
 4be:	fc 01       	movw	r30, r24
 4c0:	17 82       	std	Z+7, r1	; 0x07
 4c2:	16 82       	std	Z+6, r1	; 0x06
 4c4:	83 81       	ldd	r24, Z+3	; 0x03
 4c6:	81 ff       	sbrs	r24, 1
 4c8:	bd c1       	rjmp	.+890    	; 0x844 <vfprintf+0x398>
 4ca:	ce 01       	movw	r24, r28
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	4c 01       	movw	r8, r24
 4d0:	f7 01       	movw	r30, r14
 4d2:	93 81       	ldd	r25, Z+3	; 0x03
 4d4:	f6 01       	movw	r30, r12
 4d6:	93 fd       	sbrc	r25, 3
 4d8:	85 91       	lpm	r24, Z+
 4da:	93 ff       	sbrs	r25, 3
 4dc:	81 91       	ld	r24, Z+
 4de:	6f 01       	movw	r12, r30
 4e0:	88 23       	and	r24, r24
 4e2:	09 f4       	brne	.+2      	; 0x4e6 <vfprintf+0x3a>
 4e4:	ab c1       	rjmp	.+854    	; 0x83c <vfprintf+0x390>
 4e6:	85 32       	cpi	r24, 0x25	; 37
 4e8:	39 f4       	brne	.+14     	; 0x4f8 <vfprintf+0x4c>
 4ea:	93 fd       	sbrc	r25, 3
 4ec:	85 91       	lpm	r24, Z+
 4ee:	93 ff       	sbrs	r25, 3
 4f0:	81 91       	ld	r24, Z+
 4f2:	6f 01       	movw	r12, r30
 4f4:	85 32       	cpi	r24, 0x25	; 37
 4f6:	29 f4       	brne	.+10     	; 0x502 <vfprintf+0x56>
 4f8:	b7 01       	movw	r22, r14
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 500:	e7 cf       	rjmp	.-50     	; 0x4d0 <vfprintf+0x24>
 502:	51 2c       	mov	r5, r1
 504:	31 2c       	mov	r3, r1
 506:	20 e0       	ldi	r18, 0x00	; 0
 508:	20 32       	cpi	r18, 0x20	; 32
 50a:	a0 f4       	brcc	.+40     	; 0x534 <vfprintf+0x88>
 50c:	8b 32       	cpi	r24, 0x2B	; 43
 50e:	69 f0       	breq	.+26     	; 0x52a <vfprintf+0x7e>
 510:	30 f4       	brcc	.+12     	; 0x51e <vfprintf+0x72>
 512:	80 32       	cpi	r24, 0x20	; 32
 514:	59 f0       	breq	.+22     	; 0x52c <vfprintf+0x80>
 516:	83 32       	cpi	r24, 0x23	; 35
 518:	69 f4       	brne	.+26     	; 0x534 <vfprintf+0x88>
 51a:	20 61       	ori	r18, 0x10	; 16
 51c:	2c c0       	rjmp	.+88     	; 0x576 <vfprintf+0xca>
 51e:	8d 32       	cpi	r24, 0x2D	; 45
 520:	39 f0       	breq	.+14     	; 0x530 <vfprintf+0x84>
 522:	80 33       	cpi	r24, 0x30	; 48
 524:	39 f4       	brne	.+14     	; 0x534 <vfprintf+0x88>
 526:	21 60       	ori	r18, 0x01	; 1
 528:	26 c0       	rjmp	.+76     	; 0x576 <vfprintf+0xca>
 52a:	22 60       	ori	r18, 0x02	; 2
 52c:	24 60       	ori	r18, 0x04	; 4
 52e:	23 c0       	rjmp	.+70     	; 0x576 <vfprintf+0xca>
 530:	28 60       	ori	r18, 0x08	; 8
 532:	21 c0       	rjmp	.+66     	; 0x576 <vfprintf+0xca>
 534:	27 fd       	sbrc	r18, 7
 536:	27 c0       	rjmp	.+78     	; 0x586 <vfprintf+0xda>
 538:	30 ed       	ldi	r19, 0xD0	; 208
 53a:	38 0f       	add	r19, r24
 53c:	3a 30       	cpi	r19, 0x0A	; 10
 53e:	78 f4       	brcc	.+30     	; 0x55e <vfprintf+0xb2>
 540:	26 ff       	sbrs	r18, 6
 542:	06 c0       	rjmp	.+12     	; 0x550 <vfprintf+0xa4>
 544:	fa e0       	ldi	r31, 0x0A	; 10
 546:	5f 9e       	mul	r5, r31
 548:	30 0d       	add	r19, r0
 54a:	11 24       	eor	r1, r1
 54c:	53 2e       	mov	r5, r19
 54e:	13 c0       	rjmp	.+38     	; 0x576 <vfprintf+0xca>
 550:	8a e0       	ldi	r24, 0x0A	; 10
 552:	38 9e       	mul	r3, r24
 554:	30 0d       	add	r19, r0
 556:	11 24       	eor	r1, r1
 558:	33 2e       	mov	r3, r19
 55a:	20 62       	ori	r18, 0x20	; 32
 55c:	0c c0       	rjmp	.+24     	; 0x576 <vfprintf+0xca>
 55e:	8e 32       	cpi	r24, 0x2E	; 46
 560:	21 f4       	brne	.+8      	; 0x56a <vfprintf+0xbe>
 562:	26 fd       	sbrc	r18, 6
 564:	6b c1       	rjmp	.+726    	; 0x83c <vfprintf+0x390>
 566:	20 64       	ori	r18, 0x40	; 64
 568:	06 c0       	rjmp	.+12     	; 0x576 <vfprintf+0xca>
 56a:	8c 36       	cpi	r24, 0x6C	; 108
 56c:	11 f4       	brne	.+4      	; 0x572 <vfprintf+0xc6>
 56e:	20 68       	ori	r18, 0x80	; 128
 570:	02 c0       	rjmp	.+4      	; 0x576 <vfprintf+0xca>
 572:	88 36       	cpi	r24, 0x68	; 104
 574:	41 f4       	brne	.+16     	; 0x586 <vfprintf+0xda>
 576:	f6 01       	movw	r30, r12
 578:	93 fd       	sbrc	r25, 3
 57a:	85 91       	lpm	r24, Z+
 57c:	93 ff       	sbrs	r25, 3
 57e:	81 91       	ld	r24, Z+
 580:	6f 01       	movw	r12, r30
 582:	81 11       	cpse	r24, r1
 584:	c1 cf       	rjmp	.-126    	; 0x508 <vfprintf+0x5c>
 586:	98 2f       	mov	r25, r24
 588:	9f 7d       	andi	r25, 0xDF	; 223
 58a:	95 54       	subi	r25, 0x45	; 69
 58c:	93 30       	cpi	r25, 0x03	; 3
 58e:	28 f4       	brcc	.+10     	; 0x59a <vfprintf+0xee>
 590:	0c 5f       	subi	r16, 0xFC	; 252
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	ff e3       	ldi	r31, 0x3F	; 63
 596:	f9 83       	std	Y+1, r31	; 0x01
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <vfprintf+0x108>
 59a:	83 36       	cpi	r24, 0x63	; 99
 59c:	31 f0       	breq	.+12     	; 0x5aa <vfprintf+0xfe>
 59e:	83 37       	cpi	r24, 0x73	; 115
 5a0:	71 f0       	breq	.+28     	; 0x5be <vfprintf+0x112>
 5a2:	83 35       	cpi	r24, 0x53	; 83
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <vfprintf+0xfc>
 5a6:	5b c0       	rjmp	.+182    	; 0x65e <vfprintf+0x1b2>
 5a8:	22 c0       	rjmp	.+68     	; 0x5ee <vfprintf+0x142>
 5aa:	f8 01       	movw	r30, r16
 5ac:	80 81       	ld	r24, Z
 5ae:	89 83       	std	Y+1, r24	; 0x01
 5b0:	0e 5f       	subi	r16, 0xFE	; 254
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	44 24       	eor	r4, r4
 5b6:	43 94       	inc	r4
 5b8:	51 2c       	mov	r5, r1
 5ba:	54 01       	movw	r10, r8
 5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <vfprintf+0x13c>
 5be:	38 01       	movw	r6, r16
 5c0:	f2 e0       	ldi	r31, 0x02	; 2
 5c2:	6f 0e       	add	r6, r31
 5c4:	71 1c       	adc	r7, r1
 5c6:	f8 01       	movw	r30, r16
 5c8:	a0 80       	ld	r10, Z
 5ca:	b1 80       	ldd	r11, Z+1	; 0x01
 5cc:	26 ff       	sbrs	r18, 6
 5ce:	03 c0       	rjmp	.+6      	; 0x5d6 <vfprintf+0x12a>
 5d0:	65 2d       	mov	r22, r5
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	02 c0       	rjmp	.+4      	; 0x5da <vfprintf+0x12e>
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	7f ef       	ldi	r23, 0xFF	; 255
 5da:	c5 01       	movw	r24, r10
 5dc:	2c 87       	std	Y+12, r18	; 0x0c
 5de:	0e 94 33 04 	call	0x866	; 0x866 <strnlen>
 5e2:	2c 01       	movw	r4, r24
 5e4:	83 01       	movw	r16, r6
 5e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 5e8:	2f 77       	andi	r18, 0x7F	; 127
 5ea:	22 2e       	mov	r2, r18
 5ec:	17 c0       	rjmp	.+46     	; 0x61c <vfprintf+0x170>
 5ee:	38 01       	movw	r6, r16
 5f0:	f2 e0       	ldi	r31, 0x02	; 2
 5f2:	6f 0e       	add	r6, r31
 5f4:	71 1c       	adc	r7, r1
 5f6:	f8 01       	movw	r30, r16
 5f8:	a0 80       	ld	r10, Z
 5fa:	b1 80       	ldd	r11, Z+1	; 0x01
 5fc:	26 ff       	sbrs	r18, 6
 5fe:	03 c0       	rjmp	.+6      	; 0x606 <vfprintf+0x15a>
 600:	65 2d       	mov	r22, r5
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	02 c0       	rjmp	.+4      	; 0x60a <vfprintf+0x15e>
 606:	6f ef       	ldi	r22, 0xFF	; 255
 608:	7f ef       	ldi	r23, 0xFF	; 255
 60a:	c5 01       	movw	r24, r10
 60c:	2c 87       	std	Y+12, r18	; 0x0c
 60e:	0e 94 28 04 	call	0x850	; 0x850 <strnlen_P>
 612:	2c 01       	movw	r4, r24
 614:	2c 85       	ldd	r18, Y+12	; 0x0c
 616:	20 68       	ori	r18, 0x80	; 128
 618:	22 2e       	mov	r2, r18
 61a:	83 01       	movw	r16, r6
 61c:	23 fc       	sbrc	r2, 3
 61e:	1b c0       	rjmp	.+54     	; 0x656 <vfprintf+0x1aa>
 620:	83 2d       	mov	r24, r3
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	48 16       	cp	r4, r24
 626:	59 06       	cpc	r5, r25
 628:	b0 f4       	brcc	.+44     	; 0x656 <vfprintf+0x1aa>
 62a:	b7 01       	movw	r22, r14
 62c:	80 e2       	ldi	r24, 0x20	; 32
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 634:	3a 94       	dec	r3
 636:	f4 cf       	rjmp	.-24     	; 0x620 <vfprintf+0x174>
 638:	f5 01       	movw	r30, r10
 63a:	27 fc       	sbrc	r2, 7
 63c:	85 91       	lpm	r24, Z+
 63e:	27 fe       	sbrs	r2, 7
 640:	81 91       	ld	r24, Z+
 642:	5f 01       	movw	r10, r30
 644:	b7 01       	movw	r22, r14
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 64c:	31 10       	cpse	r3, r1
 64e:	3a 94       	dec	r3
 650:	f1 e0       	ldi	r31, 0x01	; 1
 652:	4f 1a       	sub	r4, r31
 654:	51 08       	sbc	r5, r1
 656:	41 14       	cp	r4, r1
 658:	51 04       	cpc	r5, r1
 65a:	71 f7       	brne	.-36     	; 0x638 <vfprintf+0x18c>
 65c:	e5 c0       	rjmp	.+458    	; 0x828 <vfprintf+0x37c>
 65e:	84 36       	cpi	r24, 0x64	; 100
 660:	11 f0       	breq	.+4      	; 0x666 <vfprintf+0x1ba>
 662:	89 36       	cpi	r24, 0x69	; 105
 664:	39 f5       	brne	.+78     	; 0x6b4 <vfprintf+0x208>
 666:	f8 01       	movw	r30, r16
 668:	27 ff       	sbrs	r18, 7
 66a:	07 c0       	rjmp	.+14     	; 0x67a <vfprintf+0x1ce>
 66c:	60 81       	ld	r22, Z
 66e:	71 81       	ldd	r23, Z+1	; 0x01
 670:	82 81       	ldd	r24, Z+2	; 0x02
 672:	93 81       	ldd	r25, Z+3	; 0x03
 674:	0c 5f       	subi	r16, 0xFC	; 252
 676:	1f 4f       	sbci	r17, 0xFF	; 255
 678:	08 c0       	rjmp	.+16     	; 0x68a <vfprintf+0x1de>
 67a:	60 81       	ld	r22, Z
 67c:	71 81       	ldd	r23, Z+1	; 0x01
 67e:	07 2e       	mov	r0, r23
 680:	00 0c       	add	r0, r0
 682:	88 0b       	sbc	r24, r24
 684:	99 0b       	sbc	r25, r25
 686:	0e 5f       	subi	r16, 0xFE	; 254
 688:	1f 4f       	sbci	r17, 0xFF	; 255
 68a:	2f 76       	andi	r18, 0x6F	; 111
 68c:	72 2e       	mov	r7, r18
 68e:	97 ff       	sbrs	r25, 7
 690:	09 c0       	rjmp	.+18     	; 0x6a4 <vfprintf+0x1f8>
 692:	90 95       	com	r25
 694:	80 95       	com	r24
 696:	70 95       	com	r23
 698:	61 95       	neg	r22
 69a:	7f 4f       	sbci	r23, 0xFF	; 255
 69c:	8f 4f       	sbci	r24, 0xFF	; 255
 69e:	9f 4f       	sbci	r25, 0xFF	; 255
 6a0:	20 68       	ori	r18, 0x80	; 128
 6a2:	72 2e       	mov	r7, r18
 6a4:	2a e0       	ldi	r18, 0x0A	; 10
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	a4 01       	movw	r20, r8
 6aa:	0e 94 76 04 	call	0x8ec	; 0x8ec <__ultoa_invert>
 6ae:	a8 2e       	mov	r10, r24
 6b0:	a8 18       	sub	r10, r8
 6b2:	44 c0       	rjmp	.+136    	; 0x73c <vfprintf+0x290>
 6b4:	85 37       	cpi	r24, 0x75	; 117
 6b6:	29 f4       	brne	.+10     	; 0x6c2 <vfprintf+0x216>
 6b8:	2f 7e       	andi	r18, 0xEF	; 239
 6ba:	b2 2e       	mov	r11, r18
 6bc:	2a e0       	ldi	r18, 0x0A	; 10
 6be:	30 e0       	ldi	r19, 0x00	; 0
 6c0:	25 c0       	rjmp	.+74     	; 0x70c <vfprintf+0x260>
 6c2:	f2 2f       	mov	r31, r18
 6c4:	f9 7f       	andi	r31, 0xF9	; 249
 6c6:	bf 2e       	mov	r11, r31
 6c8:	8f 36       	cpi	r24, 0x6F	; 111
 6ca:	c1 f0       	breq	.+48     	; 0x6fc <vfprintf+0x250>
 6cc:	18 f4       	brcc	.+6      	; 0x6d4 <vfprintf+0x228>
 6ce:	88 35       	cpi	r24, 0x58	; 88
 6d0:	79 f0       	breq	.+30     	; 0x6f0 <vfprintf+0x244>
 6d2:	b4 c0       	rjmp	.+360    	; 0x83c <vfprintf+0x390>
 6d4:	80 37       	cpi	r24, 0x70	; 112
 6d6:	19 f0       	breq	.+6      	; 0x6de <vfprintf+0x232>
 6d8:	88 37       	cpi	r24, 0x78	; 120
 6da:	21 f0       	breq	.+8      	; 0x6e4 <vfprintf+0x238>
 6dc:	af c0       	rjmp	.+350    	; 0x83c <vfprintf+0x390>
 6de:	2f 2f       	mov	r18, r31
 6e0:	20 61       	ori	r18, 0x10	; 16
 6e2:	b2 2e       	mov	r11, r18
 6e4:	b4 fe       	sbrs	r11, 4
 6e6:	0d c0       	rjmp	.+26     	; 0x702 <vfprintf+0x256>
 6e8:	8b 2d       	mov	r24, r11
 6ea:	84 60       	ori	r24, 0x04	; 4
 6ec:	b8 2e       	mov	r11, r24
 6ee:	09 c0       	rjmp	.+18     	; 0x702 <vfprintf+0x256>
 6f0:	24 ff       	sbrs	r18, 4
 6f2:	0a c0       	rjmp	.+20     	; 0x708 <vfprintf+0x25c>
 6f4:	9f 2f       	mov	r25, r31
 6f6:	96 60       	ori	r25, 0x06	; 6
 6f8:	b9 2e       	mov	r11, r25
 6fa:	06 c0       	rjmp	.+12     	; 0x708 <vfprintf+0x25c>
 6fc:	28 e0       	ldi	r18, 0x08	; 8
 6fe:	30 e0       	ldi	r19, 0x00	; 0
 700:	05 c0       	rjmp	.+10     	; 0x70c <vfprintf+0x260>
 702:	20 e1       	ldi	r18, 0x10	; 16
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <vfprintf+0x260>
 708:	20 e1       	ldi	r18, 0x10	; 16
 70a:	32 e0       	ldi	r19, 0x02	; 2
 70c:	f8 01       	movw	r30, r16
 70e:	b7 fe       	sbrs	r11, 7
 710:	07 c0       	rjmp	.+14     	; 0x720 <vfprintf+0x274>
 712:	60 81       	ld	r22, Z
 714:	71 81       	ldd	r23, Z+1	; 0x01
 716:	82 81       	ldd	r24, Z+2	; 0x02
 718:	93 81       	ldd	r25, Z+3	; 0x03
 71a:	0c 5f       	subi	r16, 0xFC	; 252
 71c:	1f 4f       	sbci	r17, 0xFF	; 255
 71e:	06 c0       	rjmp	.+12     	; 0x72c <vfprintf+0x280>
 720:	60 81       	ld	r22, Z
 722:	71 81       	ldd	r23, Z+1	; 0x01
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	0e 5f       	subi	r16, 0xFE	; 254
 72a:	1f 4f       	sbci	r17, 0xFF	; 255
 72c:	a4 01       	movw	r20, r8
 72e:	0e 94 76 04 	call	0x8ec	; 0x8ec <__ultoa_invert>
 732:	a8 2e       	mov	r10, r24
 734:	a8 18       	sub	r10, r8
 736:	fb 2d       	mov	r31, r11
 738:	ff 77       	andi	r31, 0x7F	; 127
 73a:	7f 2e       	mov	r7, r31
 73c:	76 fe       	sbrs	r7, 6
 73e:	0b c0       	rjmp	.+22     	; 0x756 <vfprintf+0x2aa>
 740:	37 2d       	mov	r19, r7
 742:	3e 7f       	andi	r19, 0xFE	; 254
 744:	a5 14       	cp	r10, r5
 746:	50 f4       	brcc	.+20     	; 0x75c <vfprintf+0x2b0>
 748:	74 fe       	sbrs	r7, 4
 74a:	0a c0       	rjmp	.+20     	; 0x760 <vfprintf+0x2b4>
 74c:	72 fc       	sbrc	r7, 2
 74e:	08 c0       	rjmp	.+16     	; 0x760 <vfprintf+0x2b4>
 750:	37 2d       	mov	r19, r7
 752:	3e 7e       	andi	r19, 0xEE	; 238
 754:	05 c0       	rjmp	.+10     	; 0x760 <vfprintf+0x2b4>
 756:	ba 2c       	mov	r11, r10
 758:	37 2d       	mov	r19, r7
 75a:	03 c0       	rjmp	.+6      	; 0x762 <vfprintf+0x2b6>
 75c:	ba 2c       	mov	r11, r10
 75e:	01 c0       	rjmp	.+2      	; 0x762 <vfprintf+0x2b6>
 760:	b5 2c       	mov	r11, r5
 762:	34 ff       	sbrs	r19, 4
 764:	0d c0       	rjmp	.+26     	; 0x780 <vfprintf+0x2d4>
 766:	fe 01       	movw	r30, r28
 768:	ea 0d       	add	r30, r10
 76a:	f1 1d       	adc	r31, r1
 76c:	80 81       	ld	r24, Z
 76e:	80 33       	cpi	r24, 0x30	; 48
 770:	11 f4       	brne	.+4      	; 0x776 <vfprintf+0x2ca>
 772:	39 7e       	andi	r19, 0xE9	; 233
 774:	09 c0       	rjmp	.+18     	; 0x788 <vfprintf+0x2dc>
 776:	32 ff       	sbrs	r19, 2
 778:	06 c0       	rjmp	.+12     	; 0x786 <vfprintf+0x2da>
 77a:	b3 94       	inc	r11
 77c:	b3 94       	inc	r11
 77e:	04 c0       	rjmp	.+8      	; 0x788 <vfprintf+0x2dc>
 780:	83 2f       	mov	r24, r19
 782:	86 78       	andi	r24, 0x86	; 134
 784:	09 f0       	breq	.+2      	; 0x788 <vfprintf+0x2dc>
 786:	b3 94       	inc	r11
 788:	33 fd       	sbrc	r19, 3
 78a:	13 c0       	rjmp	.+38     	; 0x7b2 <vfprintf+0x306>
 78c:	30 ff       	sbrs	r19, 0
 78e:	06 c0       	rjmp	.+12     	; 0x79c <vfprintf+0x2f0>
 790:	5a 2c       	mov	r5, r10
 792:	b3 14       	cp	r11, r3
 794:	18 f4       	brcc	.+6      	; 0x79c <vfprintf+0x2f0>
 796:	53 0c       	add	r5, r3
 798:	5b 18       	sub	r5, r11
 79a:	b3 2c       	mov	r11, r3
 79c:	b3 14       	cp	r11, r3
 79e:	68 f4       	brcc	.+26     	; 0x7ba <vfprintf+0x30e>
 7a0:	b7 01       	movw	r22, r14
 7a2:	80 e2       	ldi	r24, 0x20	; 32
 7a4:	90 e0       	ldi	r25, 0x00	; 0
 7a6:	3c 87       	std	Y+12, r19	; 0x0c
 7a8:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 7ac:	b3 94       	inc	r11
 7ae:	3c 85       	ldd	r19, Y+12	; 0x0c
 7b0:	f5 cf       	rjmp	.-22     	; 0x79c <vfprintf+0x2f0>
 7b2:	b3 14       	cp	r11, r3
 7b4:	10 f4       	brcc	.+4      	; 0x7ba <vfprintf+0x30e>
 7b6:	3b 18       	sub	r3, r11
 7b8:	01 c0       	rjmp	.+2      	; 0x7bc <vfprintf+0x310>
 7ba:	31 2c       	mov	r3, r1
 7bc:	34 ff       	sbrs	r19, 4
 7be:	12 c0       	rjmp	.+36     	; 0x7e4 <vfprintf+0x338>
 7c0:	b7 01       	movw	r22, r14
 7c2:	80 e3       	ldi	r24, 0x30	; 48
 7c4:	90 e0       	ldi	r25, 0x00	; 0
 7c6:	3c 87       	std	Y+12, r19	; 0x0c
 7c8:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 7cc:	3c 85       	ldd	r19, Y+12	; 0x0c
 7ce:	32 ff       	sbrs	r19, 2
 7d0:	17 c0       	rjmp	.+46     	; 0x800 <vfprintf+0x354>
 7d2:	31 fd       	sbrc	r19, 1
 7d4:	03 c0       	rjmp	.+6      	; 0x7dc <vfprintf+0x330>
 7d6:	88 e7       	ldi	r24, 0x78	; 120
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	02 c0       	rjmp	.+4      	; 0x7e0 <vfprintf+0x334>
 7dc:	88 e5       	ldi	r24, 0x58	; 88
 7de:	90 e0       	ldi	r25, 0x00	; 0
 7e0:	b7 01       	movw	r22, r14
 7e2:	0c c0       	rjmp	.+24     	; 0x7fc <vfprintf+0x350>
 7e4:	83 2f       	mov	r24, r19
 7e6:	86 78       	andi	r24, 0x86	; 134
 7e8:	59 f0       	breq	.+22     	; 0x800 <vfprintf+0x354>
 7ea:	31 ff       	sbrs	r19, 1
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0x346>
 7ee:	8b e2       	ldi	r24, 0x2B	; 43
 7f0:	01 c0       	rjmp	.+2      	; 0x7f4 <vfprintf+0x348>
 7f2:	80 e2       	ldi	r24, 0x20	; 32
 7f4:	37 fd       	sbrc	r19, 7
 7f6:	8d e2       	ldi	r24, 0x2D	; 45
 7f8:	b7 01       	movw	r22, r14
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 800:	a5 14       	cp	r10, r5
 802:	38 f4       	brcc	.+14     	; 0x812 <vfprintf+0x366>
 804:	b7 01       	movw	r22, r14
 806:	80 e3       	ldi	r24, 0x30	; 48
 808:	90 e0       	ldi	r25, 0x00	; 0
 80a:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 80e:	5a 94       	dec	r5
 810:	f7 cf       	rjmp	.-18     	; 0x800 <vfprintf+0x354>
 812:	aa 94       	dec	r10
 814:	f4 01       	movw	r30, r8
 816:	ea 0d       	add	r30, r10
 818:	f1 1d       	adc	r31, r1
 81a:	80 81       	ld	r24, Z
 81c:	b7 01       	movw	r22, r14
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 824:	a1 10       	cpse	r10, r1
 826:	f5 cf       	rjmp	.-22     	; 0x812 <vfprintf+0x366>
 828:	33 20       	and	r3, r3
 82a:	09 f4       	brne	.+2      	; 0x82e <vfprintf+0x382>
 82c:	51 ce       	rjmp	.-862    	; 0x4d0 <vfprintf+0x24>
 82e:	b7 01       	movw	r22, r14
 830:	80 e2       	ldi	r24, 0x20	; 32
 832:	90 e0       	ldi	r25, 0x00	; 0
 834:	0e 94 3e 04 	call	0x87c	; 0x87c <fputc>
 838:	3a 94       	dec	r3
 83a:	f6 cf       	rjmp	.-20     	; 0x828 <vfprintf+0x37c>
 83c:	f7 01       	movw	r30, r14
 83e:	86 81       	ldd	r24, Z+6	; 0x06
 840:	97 81       	ldd	r25, Z+7	; 0x07
 842:	02 c0       	rjmp	.+4      	; 0x848 <vfprintf+0x39c>
 844:	8f ef       	ldi	r24, 0xFF	; 255
 846:	9f ef       	ldi	r25, 0xFF	; 255
 848:	2c 96       	adiw	r28, 0x0c	; 12
 84a:	e2 e1       	ldi	r30, 0x12	; 18
 84c:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__epilogue_restores__>

00000850 <strnlen_P>:
 850:	fc 01       	movw	r30, r24
 852:	05 90       	lpm	r0, Z+
 854:	61 50       	subi	r22, 0x01	; 1
 856:	70 40       	sbci	r23, 0x00	; 0
 858:	01 10       	cpse	r0, r1
 85a:	d8 f7       	brcc	.-10     	; 0x852 <strnlen_P+0x2>
 85c:	80 95       	com	r24
 85e:	90 95       	com	r25
 860:	8e 0f       	add	r24, r30
 862:	9f 1f       	adc	r25, r31
 864:	08 95       	ret

00000866 <strnlen>:
 866:	fc 01       	movw	r30, r24
 868:	61 50       	subi	r22, 0x01	; 1
 86a:	70 40       	sbci	r23, 0x00	; 0
 86c:	01 90       	ld	r0, Z+
 86e:	01 10       	cpse	r0, r1
 870:	d8 f7       	brcc	.-10     	; 0x868 <strnlen+0x2>
 872:	80 95       	com	r24
 874:	90 95       	com	r25
 876:	8e 0f       	add	r24, r30
 878:	9f 1f       	adc	r25, r31
 87a:	08 95       	ret

0000087c <fputc>:
 87c:	0f 93       	push	r16
 87e:	1f 93       	push	r17
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	fb 01       	movw	r30, r22
 886:	23 81       	ldd	r18, Z+3	; 0x03
 888:	21 fd       	sbrc	r18, 1
 88a:	03 c0       	rjmp	.+6      	; 0x892 <fputc+0x16>
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	9f ef       	ldi	r25, 0xFF	; 255
 890:	28 c0       	rjmp	.+80     	; 0x8e2 <fputc+0x66>
 892:	22 ff       	sbrs	r18, 2
 894:	16 c0       	rjmp	.+44     	; 0x8c2 <fputc+0x46>
 896:	46 81       	ldd	r20, Z+6	; 0x06
 898:	57 81       	ldd	r21, Z+7	; 0x07
 89a:	24 81       	ldd	r18, Z+4	; 0x04
 89c:	35 81       	ldd	r19, Z+5	; 0x05
 89e:	42 17       	cp	r20, r18
 8a0:	53 07       	cpc	r21, r19
 8a2:	44 f4       	brge	.+16     	; 0x8b4 <fputc+0x38>
 8a4:	a0 81       	ld	r26, Z
 8a6:	b1 81       	ldd	r27, Z+1	; 0x01
 8a8:	9d 01       	movw	r18, r26
 8aa:	2f 5f       	subi	r18, 0xFF	; 255
 8ac:	3f 4f       	sbci	r19, 0xFF	; 255
 8ae:	31 83       	std	Z+1, r19	; 0x01
 8b0:	20 83       	st	Z, r18
 8b2:	8c 93       	st	X, r24
 8b4:	26 81       	ldd	r18, Z+6	; 0x06
 8b6:	37 81       	ldd	r19, Z+7	; 0x07
 8b8:	2f 5f       	subi	r18, 0xFF	; 255
 8ba:	3f 4f       	sbci	r19, 0xFF	; 255
 8bc:	37 83       	std	Z+7, r19	; 0x07
 8be:	26 83       	std	Z+6, r18	; 0x06
 8c0:	10 c0       	rjmp	.+32     	; 0x8e2 <fputc+0x66>
 8c2:	eb 01       	movw	r28, r22
 8c4:	09 2f       	mov	r16, r25
 8c6:	18 2f       	mov	r17, r24
 8c8:	00 84       	ldd	r0, Z+8	; 0x08
 8ca:	f1 85       	ldd	r31, Z+9	; 0x09
 8cc:	e0 2d       	mov	r30, r0
 8ce:	09 95       	icall
 8d0:	89 2b       	or	r24, r25
 8d2:	e1 f6       	brne	.-72     	; 0x88c <fputc+0x10>
 8d4:	8e 81       	ldd	r24, Y+6	; 0x06
 8d6:	9f 81       	ldd	r25, Y+7	; 0x07
 8d8:	01 96       	adiw	r24, 0x01	; 1
 8da:	9f 83       	std	Y+7, r25	; 0x07
 8dc:	8e 83       	std	Y+6, r24	; 0x06
 8de:	81 2f       	mov	r24, r17
 8e0:	90 2f       	mov	r25, r16
 8e2:	df 91       	pop	r29
 8e4:	cf 91       	pop	r28
 8e6:	1f 91       	pop	r17
 8e8:	0f 91       	pop	r16
 8ea:	08 95       	ret

000008ec <__ultoa_invert>:
 8ec:	fa 01       	movw	r30, r20
 8ee:	aa 27       	eor	r26, r26
 8f0:	28 30       	cpi	r18, 0x08	; 8
 8f2:	51 f1       	breq	.+84     	; 0x948 <__ultoa_invert+0x5c>
 8f4:	20 31       	cpi	r18, 0x10	; 16
 8f6:	81 f1       	breq	.+96     	; 0x958 <__ultoa_invert+0x6c>
 8f8:	e8 94       	clt
 8fa:	6f 93       	push	r22
 8fc:	6e 7f       	andi	r22, 0xFE	; 254
 8fe:	6e 5f       	subi	r22, 0xFE	; 254
 900:	7f 4f       	sbci	r23, 0xFF	; 255
 902:	8f 4f       	sbci	r24, 0xFF	; 255
 904:	9f 4f       	sbci	r25, 0xFF	; 255
 906:	af 4f       	sbci	r26, 0xFF	; 255
 908:	b1 e0       	ldi	r27, 0x01	; 1
 90a:	3e d0       	rcall	.+124    	; 0x988 <__ultoa_invert+0x9c>
 90c:	b4 e0       	ldi	r27, 0x04	; 4
 90e:	3c d0       	rcall	.+120    	; 0x988 <__ultoa_invert+0x9c>
 910:	67 0f       	add	r22, r23
 912:	78 1f       	adc	r23, r24
 914:	89 1f       	adc	r24, r25
 916:	9a 1f       	adc	r25, r26
 918:	a1 1d       	adc	r26, r1
 91a:	68 0f       	add	r22, r24
 91c:	79 1f       	adc	r23, r25
 91e:	8a 1f       	adc	r24, r26
 920:	91 1d       	adc	r25, r1
 922:	a1 1d       	adc	r26, r1
 924:	6a 0f       	add	r22, r26
 926:	71 1d       	adc	r23, r1
 928:	81 1d       	adc	r24, r1
 92a:	91 1d       	adc	r25, r1
 92c:	a1 1d       	adc	r26, r1
 92e:	20 d0       	rcall	.+64     	; 0x970 <__ultoa_invert+0x84>
 930:	09 f4       	brne	.+2      	; 0x934 <__ultoa_invert+0x48>
 932:	68 94       	set
 934:	3f 91       	pop	r19
 936:	2a e0       	ldi	r18, 0x0A	; 10
 938:	26 9f       	mul	r18, r22
 93a:	11 24       	eor	r1, r1
 93c:	30 19       	sub	r19, r0
 93e:	30 5d       	subi	r19, 0xD0	; 208
 940:	31 93       	st	Z+, r19
 942:	de f6       	brtc	.-74     	; 0x8fa <__ultoa_invert+0xe>
 944:	cf 01       	movw	r24, r30
 946:	08 95       	ret
 948:	46 2f       	mov	r20, r22
 94a:	47 70       	andi	r20, 0x07	; 7
 94c:	40 5d       	subi	r20, 0xD0	; 208
 94e:	41 93       	st	Z+, r20
 950:	b3 e0       	ldi	r27, 0x03	; 3
 952:	0f d0       	rcall	.+30     	; 0x972 <__ultoa_invert+0x86>
 954:	c9 f7       	brne	.-14     	; 0x948 <__ultoa_invert+0x5c>
 956:	f6 cf       	rjmp	.-20     	; 0x944 <__ultoa_invert+0x58>
 958:	46 2f       	mov	r20, r22
 95a:	4f 70       	andi	r20, 0x0F	; 15
 95c:	40 5d       	subi	r20, 0xD0	; 208
 95e:	4a 33       	cpi	r20, 0x3A	; 58
 960:	18 f0       	brcs	.+6      	; 0x968 <__ultoa_invert+0x7c>
 962:	49 5d       	subi	r20, 0xD9	; 217
 964:	31 fd       	sbrc	r19, 1
 966:	40 52       	subi	r20, 0x20	; 32
 968:	41 93       	st	Z+, r20
 96a:	02 d0       	rcall	.+4      	; 0x970 <__ultoa_invert+0x84>
 96c:	a9 f7       	brne	.-22     	; 0x958 <__ultoa_invert+0x6c>
 96e:	ea cf       	rjmp	.-44     	; 0x944 <__ultoa_invert+0x58>
 970:	b4 e0       	ldi	r27, 0x04	; 4
 972:	a6 95       	lsr	r26
 974:	97 95       	ror	r25
 976:	87 95       	ror	r24
 978:	77 95       	ror	r23
 97a:	67 95       	ror	r22
 97c:	ba 95       	dec	r27
 97e:	c9 f7       	brne	.-14     	; 0x972 <__ultoa_invert+0x86>
 980:	00 97       	sbiw	r24, 0x00	; 0
 982:	61 05       	cpc	r22, r1
 984:	71 05       	cpc	r23, r1
 986:	08 95       	ret
 988:	9b 01       	movw	r18, r22
 98a:	ac 01       	movw	r20, r24
 98c:	0a 2e       	mov	r0, r26
 98e:	06 94       	lsr	r0
 990:	57 95       	ror	r21
 992:	47 95       	ror	r20
 994:	37 95       	ror	r19
 996:	27 95       	ror	r18
 998:	ba 95       	dec	r27
 99a:	c9 f7       	brne	.-14     	; 0x98e <__ultoa_invert+0xa2>
 99c:	62 0f       	add	r22, r18
 99e:	73 1f       	adc	r23, r19
 9a0:	84 1f       	adc	r24, r20
 9a2:	95 1f       	adc	r25, r21
 9a4:	a0 1d       	adc	r26, r0
 9a6:	08 95       	ret

000009a8 <__prologue_saves__>:
 9a8:	2f 92       	push	r2
 9aa:	3f 92       	push	r3
 9ac:	4f 92       	push	r4
 9ae:	5f 92       	push	r5
 9b0:	6f 92       	push	r6
 9b2:	7f 92       	push	r7
 9b4:	8f 92       	push	r8
 9b6:	9f 92       	push	r9
 9b8:	af 92       	push	r10
 9ba:	bf 92       	push	r11
 9bc:	cf 92       	push	r12
 9be:	df 92       	push	r13
 9c0:	ef 92       	push	r14
 9c2:	ff 92       	push	r15
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
 9d0:	ca 1b       	sub	r28, r26
 9d2:	db 0b       	sbc	r29, r27
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	09 94       	ijmp

000009e0 <__epilogue_restores__>:
 9e0:	2a 88       	ldd	r2, Y+18	; 0x12
 9e2:	39 88       	ldd	r3, Y+17	; 0x11
 9e4:	48 88       	ldd	r4, Y+16	; 0x10
 9e6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9e8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ea:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ec:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ee:	9b 84       	ldd	r9, Y+11	; 0x0b
 9f0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9f2:	b9 84       	ldd	r11, Y+9	; 0x09
 9f4:	c8 84       	ldd	r12, Y+8	; 0x08
 9f6:	df 80       	ldd	r13, Y+7	; 0x07
 9f8:	ee 80       	ldd	r14, Y+6	; 0x06
 9fa:	fd 80       	ldd	r15, Y+5	; 0x05
 9fc:	0c 81       	ldd	r16, Y+4	; 0x04
 9fe:	1b 81       	ldd	r17, Y+3	; 0x03
 a00:	aa 81       	ldd	r26, Y+2	; 0x02
 a02:	b9 81       	ldd	r27, Y+1	; 0x01
 a04:	ce 0f       	add	r28, r30
 a06:	d1 1d       	adc	r29, r1
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	f8 94       	cli
 a0c:	de bf       	out	0x3e, r29	; 62
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	cd bf       	out	0x3d, r28	; 61
 a12:	ed 01       	movw	r28, r26
 a14:	08 95       	ret

00000a16 <_exit>:
 a16:	f8 94       	cli

00000a18 <__stop_program>:
 a18:	ff cf       	rjmp	.-2      	; 0xa18 <__stop_program>
